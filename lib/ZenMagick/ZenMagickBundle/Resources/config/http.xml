<?xml version="1.0" ?>

<!-- http container -->
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="zenmagick.resource_manager.class">ZenMagick\Http\View\ResourceManager</parameter>
        <parameter key="zenmagick.http.session.validator.userAgent">false</parameter>
        <parameter key="zenmagick.http.session.validator.ip">false</parameter>
        <parameter key="zenmagick.http.session.validator.sslSessionId">false</parameter>
        <!-- @todo set these by default until all forms are secured by default -->
        <parameter key="zenmagick.http.session.formtoken" type="collection">
            <parameter>login</parameter>
            <parameter>admin_login</parameter>
            <parameter>reset_password</parameter>
            <parameter>admin_reset_password</parameter>
        </parameter>
        <parameter key="zenmagick.http.virtualPathMap" type="collection"></parameter>

        <parameter key="pdo.db_options" type="collection">
            <parameter key="db_table">%table_prefix%sessions</parameter>
            <parameter key="db_id_col">sesskey</parameter>
            <parameter key="db_data_col">value</parameter>
            <parameter key="db_time_col">expiry</parameter>
        </parameter>
    </parameters>

    <services>
        <service id="session.handler.pdo" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler">
            <argument type="service" id="pdo" />
            <argument>%pdo.db_options%</argument>
        </service>

        <!-- @todo replace with symfony security -->
        <service id="sacsManager" class="ZenMagick\Http\Sacs\SacsManager">
            <argument type="service" id="service_container" />
        </service>

        <service id="taggedBlocksBlockProvider" class="ZenMagick\Http\Utils\TaggedBlocksBlockProvider">
            <tag name="zenmagick.http.blocks.provider" />
        </service>

        <service id="resourceManager" class="%zenmagick.resource_manager.class%" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <call method="setVirtualPathMap">
                <argument>%zenmagick.http.virtualPathMap%</argument>
            </call>
        </service>

        <service id="resourceResolver" class="ZenMagick\Http\View\ResourceResolver">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="messageBuilder" class="ZenMagick\Http\Utils\MessageBuilder" scope="prototype">
            <call method="setView">
                <argument type="service" id="templateView" />
            </call>
        </service>

        <service id="templateView" class="ZenMagick\Http\View\TemplateView" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <call method="setResourceManager">
                <argument type="service" id="resourceManager" />
            </call>
            <call method="setResourceResolver">
                <argument type="service" id="resourceResolver" />
            </call>
        </service>

        <service id="forward" class="ZenMagick\Http\View\ForwardView" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>


        <service id="defaultView" alias="templateView" />

        <service id="routeResolver" class="ZenMagick\Http\Routing\RouteResolver">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="redirect" class="ZenMagick\Http\View\RedirectView" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <!-- add tag -->

        <service id="booleanFormWidget" class="ZenMagick\Http\Widgets\Form\BooleanFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="passwordFormWidget" class="ZenMagick\Http\Widgets\Form\PasswordFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="selectFormWidget" class="ZenMagick\Http\Widgets\Form\SelectFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="textFormWidget" class="ZenMagick\Http\Widgets\Form\TextFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="textAreaFormWidget" class="ZenMagick\Http\Widgets\Form\TextAreaFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="toolbox" class="ZenMagick\Http\Toolbox\Toolbox">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <tag name="zenmagick.http.view.variable" key="toolbox" />
        </service>

        <!-- @todo don't depend on all this code in one listener -->
        <service id="zenmagick.http_listener" class="ZenMagick\ZenMagickBundle\EventListener\HttpListener">
            <tag name="kernel.event_subscriber" />
            <argument type="service" id="service_container" />
        </service>

        <service id="zenmagick.locale_listener" class="ZenMagick\ZenMagickBundle\EventListener\LocaleSessionListener">
            <argument>%kernel.default_locale%</argument>
             <call method="setLanguageService">
                <argument type="service" id="languageService" on-invalid="null" />
            </call>
            <tag name="kernel.event_subscriber" />
        </service>

        <service id="blockWidget" class="ZenMagick\Http\Blocks\Widgets\BlockWidget" scope="prototype" />

        <service id="zmPhpEngine" class="ZenMagick\Http\Templating\ZMPhpEngine" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <tag name="zenmagick.http.templates.engine" />
        </service>

        <service id="fileExtensionTemplateNameParser" class="Symfony\Component\Templating\TemplateNameParser" scope="prototype" />

        <service id="defaultController" class="ZenMagick\ZenMagickBundle\Controller\DefaultController" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>
        <service id="formTokenSessionValidator" class="ZenMagick\Http\Session\Validation\FormTokenSessionValidator" scope="prototype">
            <call method="setRequestIds">
                <argument>%zenmagick.http.session.formtoken%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="userAgentSessionValidator" class="ZenMagick\Http\Session\Validation\UserAgentSessionValidator" scope="prototype">
            <call method="setEnabled">
                <argument>%zenmagick.http.session.validator.userAgent%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="ipSessionValidator" class="ZenMagick\Http\Session\Validation\IPSessionValidator" scope="prototype">
            <call method="setEnabled">
                <argument>%zenmagick.http.session.validator.ip%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="sslSessionIdSessionValidator" class="ZenMagick\Http\Session\Validation\SSLSessionIdSessionValidator" scope="prototype">
            <call method="setEnabled">
                <argument>%zenmagick.http.session.validator.sslSessionId%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="zenmagick.context_routing_loader" class="ZenMagick\ZenMagickBundle\Routing\Loader\ContextLoader">
            <argument type="service" id="contextConfigLoader" strict="false" />
            <tag name="routing.loader" />
        </service>
        <service id="zenmagick.logout.success_handler" parent="security.logout.success_handler" class="ZenMagick\ZenMagickBundle\Security\Http\Logout\LogoutSuccessHandler">
            <call method="setDispatcher">
                <argument type="service" id="event_dispatcher" />
            </call>
        </service>

        <service id="zenmagick.templating.helper.settings" class="ZenMagick\ZenMagickBundle\Templating\Helper\SettingsHelper">
            <tag name="templating.helper" alias="settings" />
            <argument type="service" id="settingsService" />
        </service>

    </services>
</container>
