<?xml version="1.0" ?>

<!-- http container -->
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="zenmagick.http.httpPort">80</parameter>
        <parameter key="zenmagick.http.httpsPort">443</parameter>
        <parameter key="zenmagick.http.session.useFqdn">true</parameter>
        <!-- empty domain is ignored and session will default to $_SESSION['HTTP_HOST'] -->
        <parameter key="zenmagick.http.session.domain"></parameter>
        <parameter key="zenmagick.http.session.validator.userAgent">false</parameter>
        <parameter key="zenmagick.http.session.validator.ip">false</parameter>
        <parameter key="zenmagick.http.session.validator.sslSessionId">false</parameter>
        <parameter key="zenmagick.http.session.formToken" type="collection"></parameter>
        <parameter key="zenmagick.http.session.timeout">1440</parameter>
        <parameter key="zenmagick.http.virtualPathMap" type="collection"></parameter>
        <parameter key="zenmagick.http.sacs.mappingProviders" type="collection"></parameter>
    </parameters>

    <services>
        <service id="request" class="zenmagick\http\Request" scope="container" />

        <service id="contextConfigLoader" class="zenmagick\http\utils\ContextConfigLoader" scope="prototype">
            <call method="setContext">
                <argument>%kernel.context%</argument>
            </call>
            <call method="setSettingsService">
                <argument type="service" id="settingsService" />
            </call>
        </service>
        <service id="messageService" class="zenmagick\http\messages\Messages" scope="container">
            <tag name="zenmagick.http.view.variable" key="messageService" />
        </service>

        <service id="sacsManager" class="zenmagick\http\sacs\SacsManager" scope="container">
            <argument type="service" id="service_container" />
            <call method="load">
                <argument>%kernel.context_dir%/config/sacs_mappings.yaml</argument>
                <argument>false</argument>
            </call>
            <call method="loadProviderMappings">
                <argument>%zenmagick.http.sacs.mappingProviders%</argument>
            </call>
            <call method="setRouteResolver">
                <argument type="service" id="routeResolver" />
            </call>
        </service>

        <service id="defaultUrlRewriter" class="zenmagick\http\request\rewriter\DefaultUrlRewriter" scope="container">
            <tag name="zenmagick.http.request.rewriter" />
        </service>

        <service id="routingUrlRewriter" class="zenmagick\http\request\rewriter\RoutingUrlRewriter" scope="container">
            <tag name="zenmagick.http.request.rewriter" />
        </service>

        <service id="taggedBlocksBlockProvider" class="zenmagick\http\utils\TaggedBlocksBlockProvider" scope="container">
            <tag name="zenmagick.http.blocks.provider" />
        </service>

        <service id="resourceManager" class="zenmagick\http\view\ResourceManager" scope="prototype">
            <call method="setVirtualPathMap">
                <argument>%zenmagick.http.virtualPathMap%</argument>
            </call>
        </service>

        <service id="resourceResolver" class="zenmagick\http\view\ResourceResolver" scope="container">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="userSession" class="zenmagick\http\session\UserSession" scope="container">
            <call method="setSession">
                <argument type="service" id="session" />
            </call>
        </service>

        <service id="messageBuilder" class="zenmagick\http\utils\MessageBuilder" scope="prototype">
            <call method="setView">
                <argument type="service" id="templateView" />
            </call>
        </service>

        <service id="simpleTemplateCache" class="zenmagick\http\templating\cache\SimpleTemplateCache" scope="container">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <call method="setCache">
                <argument type="service" id="persistentCache" />
            </call>
        </service>

        <service id="templateView" class="zenmagick\http\view\TemplateView" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <call method="setResourceManager">
                <argument type="service" id="resourceManager" />
            </call>
            <call method="setResourceResolver">
                <argument type="service" id="resourceResolver" />
            </call>
            <call method="setRequest">
                <argument type="service" id="request" />
            </call>
        </service>

        <service id="forward" class="zenmagick\http\view\ForwardView" scope="prototype">
            <call method="setRequest">
                <argument type="service" id="request" />
            </call>
        </service>

        <service id="session" class="zenmagick\http\session\Session" scope="container">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <call method="setDomain">
                <argument>%zenmagick.http.session.domain%</argument>
            </call>
        </service>

        <service id="defaultView" alias="templateView" />

        <service id="requestContext" class="zenmagick\http\routing\RequestContext" scope="container">
            <argument type="service" id="request" />
            <call method="setHttpPort">
              <argument>%zenmagick.http.httpPort%</argument>
            </call>
            <call method="setHttpsPort">
              <argument>%zenmagick.http.httpsPort%</argument>
            </call>
        </service>

        <service id="routeResolver" class="zenmagick\http\routing\RouteResolver" scope="container">
            <argument type="service" id="requestContext" />
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="redirect" class="zenmagick\http\view\RedirectView" scope="prototype">
            <call method="setRequest">
                <argument type="service" id="request" />
            </call>
        </service>

        <!-- add tag -->

        <service id="booleanFormWidget" class="zenmagick\http\widgets\form\BooleanFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="passwordFormWidget" class="zenmagick\http\widgets\form\PasswordFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="selectFormWidget" class="zenmagick\http\widgets\form\SelectFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="textFormWidget" class="zenmagick\http\widgets\form\TextFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="textAreaFormWidget" class="zenmagick\http\widgets\form\TextAreaFormWidget" scope="prototype">
            <tag name="zenmagick.http.widgets.widget" />
        </service>

        <service id="toolbox" class="zenmagick\http\toolbox\Toolbox" scope="container">
            <call method="setRequest">
                <argument type="service" id="request" />
            </call>
            <tag name="zenmagick.http.view.variable" key="toolbox" />
        </service>

        <service id="controllerParameterMapper" class="zenmagick\http\controller\ControllerParameterMapper" scope="container">
            <call method="setRequest">
                <argument type="service" id="request" />
            </call>
        </service>

        <service id="http_kernel" class="zenmagick\http\HttpKernel" scope="container">
            <argument type="service" id="eventDispatcher" />
            <argument type="service" id="service_container" />
            <call method="setParameterMapper">
                <argument type="service" id="controllerParameterMapper" />
            </call>
        </service>

        <service id="blockWidget" class="zenmagick\http\blocks\widgets\BlockWidget" scope="prototype" />

        <service id="zmPhpEngine" class="zenmagick\http\templating\ZMPhpEngine" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
            <call method="setTemplateCache">
                <argument type="service" id="simpleTemplateCache" />
            </call>
            <tag name="zenmagick.http.templates.engine" />
        </service>

        <service id="fileExtensionTemplateNameParser" class="Symfony\Component\Templating\TemplateNameParser" scope="prototype" />

        <service id="resourceResolverTwigLoader" class="zenmagick\http\templating\ResourceResolverTwigLoader" scope="prototype">
            <argument type="service" id="resourceResolver" />
        </service>

        <service id="resourceResolverFileLocator" class="zenmagick\http\templating\ResourceResolverFileLocator" scope="prototype">
            <argument type="service" id="resourceResolver" />
        </service>

        <service id="twigEnvironment" class="Twig_Environment" scope="prototype">
            <argument type="service" id="resourceResolverTwigLoader" />
        </service>

        <service id="twigEngine" class="Symfony\Bundle\TwigBundle\TwigEngine" scope="prototype">
            <argument type="service" id="twigEnvironment" />
            <argument type="service" id="fileExtensionTemplateNameParser" />
            <argument type="service" id="resourceResolverFileLocator" />
            <tag name="zenmagick.http.templates.engine" />
        </service>

        <service id="defaultController" class="ZMController" scope="prototype">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>
        <service id="formTokenSessionValidator" class="zenmagick\http\session\validation\FormTokenSessionValidator" scope="prototype">
            <call method="setRequestIds">
                <argument>%zenmagick.http.session.formToken%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="userAgentSessionValidator" class="zenmagick\http\session\validation\UserAgentSessionValidator" scope="prototype">
            <call method="setEnabled">
                <argument>%zenmagick.http.session.validator.userAgent%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="ipSessionValidator" class="zenmagick\http\session\validation\IPSessionValidator" scope="prototype">
            <call method="setEnabled">
                <argument>%zenmagick.http.session.validator.ip%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

        <service id="sslSessionIdSessionValidator" class="zenmagick\http\session\validation\SSLSessionIdSessionValidator" scope="prototype">
            <call method="setEnabled">
                <argument>%zenmagick.http.session.validator.sslSessionId%</argument>
            </call>
            <tag name="zenmagick.http.session.validator" />
        </service>

    </services>
</container>
