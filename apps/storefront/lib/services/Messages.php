<?php
/*
 * ZenMagick - Smart e-commerce
 * Copyright (C) 2006-2011 zenmagick.org
 *
 * Portions Copyright (c) 2003 The zen-cart developers
 * Portions Copyright (c) 2003 osCommerce
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
?>
<?php


/**
 * Messages to be displayed to the user.
 *
 * <p>Messages will be saved in the session if not delivered.</p>
 *
 * <p>All known zen cart query message types stored are supported.</p>
 *
 * @author DerManoMann
 * @package zenmagick.store.sf.services
 */
class Messages extends ZMMessages {

    /**
     * Create new instance.
     */
    function __construct() {
        parent::__construct();
        $this->loadMessages(ZMRequest::instance()->getSession());
    }

    /**
     * Destruct instance.
     */
    function __destruct() {
        parent::__destruct();
    }


    /**
     * {@inheritDoc}
     */
    public function saveMessages($session) {
        $session->setMessages($this->getMessages());
    }

    /**
     * {@inheritDoc}
     */
    public function loadMessages($session) {
    global $messageStack;

        // add messages generated by zen-cart so far
        if (isset($messageStack) && isset($messageStack->messages)) {
            foreach ($messageStack->messages as $zenMessage) {
                if (false === ($pos = strpos($zenMessage['text'], "/>"))) {
                    $text = $zenMessage['text'];
                } else {
                    // strip image
                    $text = substr($zenMessage['text'], $pos+2);
                }
                $this->add($text,
                  (false === strpos($zenMessage['params'], 'Error')
                    ? (false === strpos($zenMessage['params'], 'Success') ? ZMMessages::T_WARN : ZMMessages::T_MESSAGE) : ZMMessages::T_ERROR));
            }
        } else {
            // look for session messages
            $this->addAll($session->getMessages());
        }

        // also check for other messages in the request...
        $request = ZMRequest::instance();
        if (null != ($error = $request->getParameter('error_message'))) {
            $this->error($error);
        }
        if (null != ($error = $request->getParameter('credit_class_error'))) {
            $this->error($error);
        }
        if (null != ($info = $request->getParameter('info_message'))) {
            $this->info($info);
        }
        if (null != ($perror = $request->getParameter('payment_error'))) {
            $this->error($request->getParameter('error', $perror));
        }

        $session->clearMessages();
    }

}
