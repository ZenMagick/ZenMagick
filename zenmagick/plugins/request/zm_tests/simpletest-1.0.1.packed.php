<?php  class SimpleRealm { var $_type; var $_root; var $_username; var $_password; function SimpleRealm($type, $url) { $this->_type = $type; $this->_root = $url->getBasePath(); $this->_username = false; $this->_password = false; } function stretch($url) { $this->_root = $this->_getCommonPath($this->_root, $url->getPath()); } function _getCommonPath($first, $second) { $first = explode('/', $first); $second = explode('/', $second); for ($i = 0; $i < min(count($first), count($second)); $i++) { if ($first[$i] != $second[$i]) { return implode('/', array_slice($first, 0, $i)) . '/'; } } return implode('/', $first) . '/'; } function setIdentity($username, $password) { $this->_username = $username; $this->_password = $password; } function getUsername() { return $this->_username; } function getPassword() { return $this->_password; } function isWithin($url) { if ($this->_isIn($this->_root, $url->getBasePath())) { return true; } if ($this->_isIn($this->_root, $url->getBasePath() . $url->getPage() . '/')) { return true; } return false; } function _isIn($part, $whole) { return strpos($whole, $part) === 0; } } class SimpleAuthenticator { var $_realms; function SimpleAuthenticator() { $this->restartSession(); } function restartSession() { $this->_realms = array(); } function addRealm($url, $type, $realm) { $this->_realms[$url->getHost()][$realm] = new SimpleRealm($type, $url); } function setIdentityForRealm($host, $realm, $username, $password) { if (isset($this->_realms[$host][$realm])) { $this->_realms[$host][$realm]->setIdentity($username, $password); } } function _findRealmFromUrl($url) { if (! isset($this->_realms[$url->getHost()])) { return false; } foreach ($this->_realms[$url->getHost()] as $name => $realm) { if ($realm->isWithin($url)) { return $realm; } } return false; } function addHeaders(&$request, $url) { if ($url->getUsername() && $url->getPassword()) { $username = $url->getUsername(); $password = $url->getPassword(); } elseif ($realm = $this->_findRealmFromUrl($url)) { $username = $realm->getUsername(); $password = $realm->getPassword(); } else { return; } $this->addBasicHeaders($request, $username, $password); } function addBasicHeaders(&$request, $username, $password) { if ($username && $password) { $request->addHeaderLine( 'Authorization: Basic ' . base64_encode("$username:$password")); } } }   if (!defined('DEFAULT_MAX_NESTED_FRAMES')) { define('DEFAULT_MAX_NESTED_FRAMES', 3); } class SimpleBrowserHistory { var $_sequence; var $_position; function SimpleBrowserHistory() { $this->_sequence = array(); $this->_position = -1; } function _isEmpty() { return ($this->_position == -1); } function _atBeginning() { return ($this->_position == 0) && ! $this->_isEmpty(); } function _atEnd() { return ($this->_position + 1 >= count($this->_sequence)) && ! $this->_isEmpty(); } function recordEntry($url, $parameters) { $this->_dropFuture(); array_push( $this->_sequence, array('url' => $url, 'parameters' => $parameters)); $this->_position++; } function getUrl() { if ($this->_isEmpty()) { return false; } return $this->_sequence[$this->_position]['url']; } function getParameters() { if ($this->_isEmpty()) { return false; } return $this->_sequence[$this->_position]['parameters']; } function back() { if ($this->_isEmpty() || $this->_atBeginning()) { return false; } $this->_position--; return true; } function forward() { if ($this->_isEmpty() || $this->_atEnd()) { return false; } $this->_position++; return true; } function _dropFuture() { if ($this->_isEmpty()) { return; } while (! $this->_atEnd()) { array_pop($this->_sequence); } } } class SimpleBrowser { var $_user_agent; var $_page; var $_history; var $_ignore_frames; var $_maximum_nested_frames; function SimpleBrowser() { $this->_user_agent = &$this->_createUserAgent(); $this->_user_agent->useProxy( SimpleTest::getDefaultProxy(), SimpleTest::getDefaultProxyUsername(), SimpleTest::getDefaultProxyPassword()); $this->_page = &new SimplePage(); $this->_history = &$this->_createHistory(); $this->_ignore_frames = false; $this->_maximum_nested_frames = DEFAULT_MAX_NESTED_FRAMES; } function &_createUserAgent() { $user_agent = &new SimpleUserAgent(); return $user_agent; } function &_createHistory() { $history = &new SimpleBrowserHistory(); return $history; } function ignoreFrames() { $this->_ignore_frames = true; } function useFrames() { $this->_ignore_frames = false; } function ignoreCookies() { $this->_user_agent->ignoreCookies(); } function useCookies() { $this->_user_agent->useCookies(); } function &_parse($response, $depth = 0) { $page = &$this->_buildPage($response); if ($this->_ignore_frames || ! $page->hasFrames() || ($depth > $this->_maximum_nested_frames)) { return $page; } $frameset = &new SimpleFrameset($page); foreach ($page->getFrameset() as $key => $url) { $frame = &$this->_fetch($url, new SimpleGetEncoding(), $depth + 1); $frameset->addFrame($frame, $key); } return $frameset; } function &_buildPage($response) { $builder = &new SimplePageBuilder(); $page = &$builder->parse($response); $builder->free(); unset($builder); return $page; } function &_fetch($url, $encoding, $depth = 0) { $response = &$this->_user_agent->fetchResponse($url, $encoding); if ($response->isError()) { $page = &new SimplePage($response); } else { $page = &$this->_parse($response, $depth); } return $page; } function _load($url, $parameters) { $frame = $url->getTarget(); if (! $frame || ! $this->_page->hasFrames() || (strtolower($frame) == '_top')) { return $this->_loadPage($url, $parameters); } return $this->_loadFrame(array($frame), $url, $parameters); } function _loadPage($url, $parameters) { $this->_page = &$this->_fetch($url, $parameters); $this->_history->recordEntry( $this->_page->getUrl(), $this->_page->getRequestData()); return $this->_page->getRaw(); } function _loadFrame($frames, $url, $parameters) { $page = &$this->_fetch($url, $parameters); $this->_page->setFrame($frames, $page); return $page->getRaw(); } function restart($date = false) { $this->_user_agent->restart($date); } function addHeader($header) { $this->_user_agent->addHeader($header); } function ageCookies($interval) { $this->_user_agent->ageCookies($interval); } function setCookie($name, $value, $host = false, $path = '/', $expiry = false) { $this->_user_agent->setCookie($name, $value, $host, $path, $expiry); } function getCookieValue($host, $path, $name) { return $this->_user_agent->getCookieValue($host, $path, $name); } function getCurrentCookieValue($name) { return $this->_user_agent->getBaseCookieValue($name, $this->_page->getUrl()); } function setMaximumRedirects($max) { $this->_user_agent->setMaximumRedirects($max); } function setMaximumNestedFrames($max) { $this->_maximum_nested_frames = $max; } function setConnectionTimeout($timeout) { $this->_user_agent->setConnectionTimeout($timeout); } function useProxy($proxy, $username = false, $password = false) { $this->_user_agent->useProxy($proxy, $username, $password); } function head($url, $parameters = false) { if (! is_object($url)) { $url = new SimpleUrl($url); } if ($this->getUrl()) { $url = $url->makeAbsolute($this->getUrl()); } $response = &$this->_user_agent->fetchResponse($url, new SimpleHeadEncoding($parameters)); return ! $response->isError(); } function get($url, $parameters = false) { if (! is_object($url)) { $url = new SimpleUrl($url); } if ($this->getUrl()) { $url = $url->makeAbsolute($this->getUrl()); } return $this->_load($url, new SimpleGetEncoding($parameters)); } function post($url, $parameters = false) { if (! is_object($url)) { $url = new SimpleUrl($url); } if ($this->getUrl()) { $url = $url->makeAbsolute($this->getUrl()); } return $this->_load($url, new SimplePostEncoding($parameters)); } function retry() { $frames = $this->_page->getFrameFocus(); if (count($frames) > 0) { $this->_loadFrame( $frames, $this->_page->getUrl(), $this->_page->getRequestData()); return $this->_page->getRaw(); } if ($url = $this->_history->getUrl()) { $this->_page = &$this->_fetch($url, $this->_history->getParameters()); return $this->_page->getRaw(); } return false; } function back() { if (! $this->_history->back()) { return false; } $content = $this->retry(); if (! $content) { $this->_history->forward(); } return $content; } function forward() { if (! $this->_history->forward()) { return false; } $content = $this->retry(); if (! $content) { $this->_history->back(); } return $content; } function authenticate($username, $password) { if (! $this->_page->getRealm()) { return false; } $url = $this->_page->getUrl(); if (! $url) { return false; } $this->_user_agent->setIdentity( $url->getHost(), $this->_page->getRealm(), $username, $password); return $this->retry(); } function getFrames() { return $this->_page->getFrames(); } function getFrameFocus() { return $this->_page->getFrameFocus(); } function setFrameFocusByIndex($choice) { return $this->_page->setFrameFocusByIndex($choice); } function setFrameFocus($name) { return $this->_page->setFrameFocus($name); } function clearFrameFocus() { return $this->_page->clearFrameFocus(); } function getTransportError() { return $this->_page->getTransportError(); } function getMimeType() { return $this->_page->getMimeType(); } function getResponseCode() { return $this->_page->getResponseCode(); } function getAuthentication() { return $this->_page->getAuthentication(); } function getRealm() { return $this->_page->getRealm(); } function getUrl() { $url = $this->_page->getUrl(); return $url ? $url->asString() : false; } function getBaseUrl() { $url = $this->_page->getBaseUrl(); return $url ? $url->asString() : false; } function getRequest() { return $this->_page->getRequest(); } function getHeaders() { return $this->_page->getHeaders(); } function getContent() { return $this->_page->getRaw(); } function getContentAsText() { return $this->_page->getText(); } function getTitle() { return $this->_page->getTitle(); } function getUrls() { return $this->_page->getUrls(); } function setField($label, $value, $position=false) { return $this->_page->setField(new SimpleByLabelOrName($label), $value, $position); } function setFieldByName($name, $value, $position=false) { return $this->_page->setField(new SimpleByName($name), $value, $position); } function setFieldById($id, $value) { return $this->_page->setField(new SimpleById($id), $value); } function getField($label) { return $this->_page->getField(new SimpleByLabelOrName($label)); } function getFieldByName($name) { return $this->_page->getField(new SimpleByName($name)); } function getFieldById($id) { return $this->_page->getField(new SimpleById($id)); } function clickSubmit($label = 'Submit', $additional = false) { if (! ($form = &$this->_page->getFormBySubmit(new SimpleByLabel($label)))) { return false; } $success = $this->_load( $form->getAction(), $form->submitButton(new SimpleByLabel($label), $additional)); return ($success ? $this->getContent() : $success); } function clickSubmitByName($name, $additional = false) { if (! ($form = &$this->_page->getFormBySubmit(new SimpleByName($name)))) { return false; } $success = $this->_load( $form->getAction(), $form->submitButton(new SimpleByName($name), $additional)); return ($success ? $this->getContent() : $success); } function clickSubmitById($id, $additional = false) { if (! ($form = &$this->_page->getFormBySubmit(new SimpleById($id)))) { return false; } $success = $this->_load( $form->getAction(), $form->submitButton(new SimpleById($id), $additional)); return ($success ? $this->getContent() : $success); } function isSubmit($label) { return (boolean)$this->_page->getFormBySubmit(new SimpleByLabel($label)); } function clickImage($label, $x = 1, $y = 1, $additional = false) { if (! ($form = &$this->_page->getFormByImage(new SimpleByLabel($label)))) { return false; } $success = $this->_load( $form->getAction(), $form->submitImage(new SimpleByLabel($label), $x, $y, $additional)); return ($success ? $this->getContent() : $success); } function clickImageByName($name, $x = 1, $y = 1, $additional = false) { if (! ($form = &$this->_page->getFormByImage(new SimpleByName($name)))) { return false; } $success = $this->_load( $form->getAction(), $form->submitImage(new SimpleByName($name), $x, $y, $additional)); return ($success ? $this->getContent() : $success); } function clickImageById($id, $x = 1, $y = 1, $additional = false) { if (! ($form = &$this->_page->getFormByImage(new SimpleById($id)))) { return false; } $success = $this->_load( $form->getAction(), $form->submitImage(new SimpleById($id), $x, $y, $additional)); return ($success ? $this->getContent() : $success); } function isImage($label) { return (boolean)$this->_page->getFormByImage(new SimpleByLabel($label)); } function submitFormById($id) { if (! ($form = &$this->_page->getFormById($id))) { return false; } $success = $this->_load( $form->getAction(), $form->submit()); return ($success ? $this->getContent() : $success); } function getLink($label, $index = 0) { $urls = $this->_page->getUrlsByLabel($label); if (count($urls) == 0) { return false; } if (count($urls) < $index + 1) { return false; } return $urls[$index]; } function clickLink($label, $index = 0) { $url = $this->getLink($label, $index); if ($url === false) { return false; } $this->_load($url, new SimpleGetEncoding()); return $this->getContent(); } function getLinkById($id) { return $this->_page->getUrlById($id); } function clickLinkById($id) { if (! ($url = $this->getLinkById($id))) { return false; } $this->_load($url, new SimpleGetEncoding()); return $this->getContent(); } function click($label) { $raw = $this->clickSubmit($label); if (! $raw) { $raw = $this->clickLink($label); } if (! $raw) { $raw = $this->clickImage($label); } return $raw; } function isClickable($label) { return $this->isSubmit($label) || ($this->getLink($label) !== false) || $this->isImage($label); } }   class SimpleCollector { function _removeTrailingSlash($path) { if (substr($path, -1) == DIRECTORY_SEPARATOR) { return substr($path, 0, -1); } elseif (substr($path, -1) == '/') { return substr($path, 0, -1); } else { return $path; } } function collect(&$test, $path) { $path = $this->_removeTrailingSlash($path); if ($handle = opendir($path)) { while (($entry = readdir($handle)) !== false) { if ($this->_isHidden($entry)) { continue; } $this->_handle($test, $path . DIRECTORY_SEPARATOR . $entry); } closedir($handle); } } function _handle(&$test, $file) { if (is_dir($file)) { return; } $test->addTestFile($file); } function _isHidden($filename) { return strncmp($filename, '.', 1) == 0; } } class SimplePatternCollector extends SimpleCollector { var $_pattern; function SimplePatternCollector($pattern = '/php$/i') { $this->_pattern = $pattern; } function _handle(&$test, $filename) { if (preg_match($this->_pattern, $filename)) { parent::_handle($test, $filename); } } }   class SimpleTestCompatibility { function copy($object) { if (version_compare(phpversion(), '5') >= 0) { eval('$copy = clone $object;'); return $copy; } return $object; } function isIdentical($first, $second) { if (version_compare(phpversion(), '5') >= 0) { return SimpleTestCompatibility::_isIdenticalType($first, $second); } if ($first != $second) { return false; } return ($first === $second); } function _isIdenticalType($first, $second) { if (gettype($first) != gettype($second)) { return false; } if (is_object($first) && is_object($second)) { if (get_class($first) != get_class($second)) { return false; } return SimpleTestCompatibility::_isArrayOfIdenticalTypes( get_object_vars($first), get_object_vars($second)); } if (is_array($first) && is_array($second)) { return SimpleTestCompatibility::_isArrayOfIdenticalTypes($first, $second); } if ($first !== $second) { return false; } return true; } function _isArrayOfIdenticalTypes($first, $second) { if (array_keys($first) != array_keys($second)) { return false; } foreach (array_keys($first) as $key) { $is_identical = SimpleTestCompatibility::_isIdenticalType( $first[$key], $second[$key]); if (! $is_identical) { return false; } } return true; } function isReference(&$first, &$second) { if (version_compare(phpversion(), '5', '>=') && is_object($first)) { return ($first === $second); } if (is_object($first) && is_object($second)) { $id = uniqid("test"); $first->$id = true; $is_ref = isset($second->$id); unset($first->$id); return $is_ref; } $temp = $first; $first = uniqid("test"); $is_ref = ($first === $second); $first = $temp; return $is_ref; } function isA($object, $class) { if (version_compare(phpversion(), '5') >= 0) { if (! class_exists($class, false)) { if (function_exists('interface_exists')) { if (! interface_exists($class, false)) { return false; } } } eval("\$is_a = \$object instanceof $class;"); return $is_a; } if (function_exists('is_a')) { return is_a($object, $class); } return ((strtolower($class) == get_class($object)) or (is_subclass_of($object, $class))); } function setTimeout($handle, $timeout) { if (function_exists('stream_set_timeout')) { stream_set_timeout($handle, $timeout, 0); } elseif (function_exists('socket_set_timeout')) { socket_set_timeout($handle, $timeout, 0); } elseif (function_exists('set_socket_timeout')) { set_socket_timeout($handle, $timeout, 0); } } }   class SimpleCookie { var $_host; var $_name; var $_value; var $_path; var $_expiry; var $_is_secure; function SimpleCookie($name, $value = false, $path = false, $expiry = false, $is_secure = false) { $this->_host = false; $this->_name = $name; $this->_value = $value; $this->_path = ($path ? $this->_fixPath($path) : "/"); $this->_expiry = false; if (is_string($expiry)) { $this->_expiry = strtotime($expiry); } elseif (is_integer($expiry)) { $this->_expiry = $expiry; } $this->_is_secure = $is_secure; } function setHost($host) { if ($host = $this->_truncateHost($host)) { $this->_host = $host; return true; } return false; } function getHost() { return $this->_host; } function isValidHost($host) { return ($this->_truncateHost($host) === $this->getHost()); } function _truncateHost($host) { $tlds = SimpleUrl::getAllTopLevelDomains(); if (preg_match('/[a-z\-]+\.(' . $tlds . ')$/i', $host, $matches)) { return $matches[0]; } elseif (preg_match('/[a-z\-]+\.[a-z\-]+\.[a-z\-]+$/i', $host, $matches)) { return $matches[0]; } return false; } function getName() { return $this->_name; } function getValue() { return $this->_value; } function getPath() { return $this->_path; } function isValidPath($path) { return (strncmp( $this->_fixPath($path), $this->getPath(), strlen($this->getPath())) == 0); } function getExpiry() { if (! $this->_expiry) { return false; } return gmdate("D, d M Y H:i:s", $this->_expiry) . " GMT"; } function isExpired($now) { if (! $this->_expiry) { return true; } if (is_string($now)) { $now = strtotime($now); } return ($this->_expiry < $now); } function agePrematurely($interval) { if ($this->_expiry) { $this->_expiry -= $interval; } } function isSecure() { return $this->_is_secure; } function _fixPath($path) { if (substr($path, 0, 1) != '/') { $path = '/' . $path; } if (substr($path, -1, 1) != '/') { $path .= '/'; } return $path; } } class SimpleCookieJar { var $_cookies; function SimpleCookieJar() { $this->_cookies = array(); } function restartSession($date = false) { $surviving_cookies = array(); for ($i = 0; $i < count($this->_cookies); $i++) { if (! $this->_cookies[$i]->getValue()) { continue; } if (! $this->_cookies[$i]->getExpiry()) { continue; } if ($date && $this->_cookies[$i]->isExpired($date)) { continue; } $surviving_cookies[] = $this->_cookies[$i]; } $this->_cookies = $surviving_cookies; } function agePrematurely($interval) { for ($i = 0; $i < count($this->_cookies); $i++) { $this->_cookies[$i]->agePrematurely($interval); } } function setCookie($name, $value, $host = false, $path = '/', $expiry = false) { $cookie = new SimpleCookie($name, $value, $path, $expiry); if ($host) { $cookie->setHost($host); } $this->_cookies[$this->_findFirstMatch($cookie)] = $cookie; } function _findFirstMatch($cookie) { for ($i = 0; $i < count($this->_cookies); $i++) { $is_match = $this->_isMatch( $cookie, $this->_cookies[$i]->getHost(), $this->_cookies[$i]->getPath(), $this->_cookies[$i]->getName()); if ($is_match) { return $i; } } return count($this->_cookies); } function getCookieValue($host, $path, $name) { $longest_path = ''; foreach ($this->_cookies as $cookie) { if ($this->_isMatch($cookie, $host, $path, $name)) { if (strlen($cookie->getPath()) > strlen($longest_path)) { $value = $cookie->getValue(); $longest_path = $cookie->getPath(); } } } return (isset($value) ? $value : false); } function _isMatch($cookie, $host, $path, $name) { if ($cookie->getName() != $name) { return false; } if ($host && $cookie->getHost() && ! $cookie->isValidHost($host)) { return false; } if (! $cookie->isValidPath($path)) { return false; } return true; } function selectAsPairs($url) { $pairs = array(); foreach ($this->_cookies as $cookie) { if ($this->_isMatch($cookie, $url->getHost(), $url->getPath(), $cookie->getName())) { $pairs[] = $cookie->getName() . '=' . $cookie->getValue(); } } return $pairs; } }   class SimpleCommandLineParser { var $_to_property = array( 'case' => '_case', 'c' => '_case', 'test' => '_test', 't' => '_test', 'xml' => '_xml', 'x' => '_xml'); var $_case = ''; var $_test = ''; var $_xml = false; var $_no_skips = false; function SimpleCommandLineParser($arguments) { if (! is_array($arguments)) { return; } foreach ($arguments as $i => $argument) { if (preg_match('/^--?(test|case|t|c)=(.+)$/', $argument, $matches)) { $property = $this->_to_property[$matches[1]]; $this->$property = $matches[2]; } elseif (preg_match('/^--?(test|case|t|c)$/', $argument, $matches)) { $property = $this->_to_property[$matches[1]]; if (isset($arguments[$i + 1])) { $this->$property = $arguments[$i + 1]; } } elseif (preg_match('/^--?(xml|x)$/', $argument)) { $this->_xml = true; } elseif (preg_match('/^--?(no-skip|no-skips|s)$/', $argument)) { $this->_no_skips = true; } } } function getTest() { return $this->_test; } function getTestCase() { return $this->_case; } function isXml() { return $this->_xml; } function noSkips() { return $this->_no_skips; } } class DefaultReporter extends SimpleReporterDecorator { function DefaultReporter() { if (SimpleReporter::inCli()) { global $argv; $parser = new SimpleCommandLineParser($argv); $interfaces = $parser->isXml() ? array('XmlReporter') : array('TextReporter'); $reporter = &new SelectiveReporter( SimpleTest::preferred($interfaces), $parser->getTestCase(), $parser->getTest()); if ($parser->noSkips()) { $reporter = &new NoSkipsReporter($reporter); } } else { $reporter = &new SelectiveReporter( SimpleTest::preferred('HtmlReporter'), @$_GET['c'], @$_GET['t']); if (@$_GET['skips'] == 'no' || @$_GET['show-skips'] == 'no') { $reporter = &new NoSkipsReporter($reporter); } } $this->SimpleReporterDecorator($reporter); } }   class DetachedTestCase { var $_command; var $_dry_command; var $_size; function DetachedTestCase($command, $dry_command = false) { $this->_command = $command; $this->_dry_command = $dry_command ? $dry_command : $command; $this->_size = false; } function getLabel() { return $this->_command; } function run(&$reporter) { $shell = &new SimpleShell(); $shell->execute($this->_command); $parser = &$this->_createParser($reporter); if (! $parser->parse($shell->getOutput())) { trigger_error('Cannot parse incoming XML from [' . $this->_command . ']'); return false; } return true; } function getSize() { if ($this->_size === false) { $shell = &new SimpleShell(); $shell->execute($this->_dry_command); $reporter = &new SimpleReporter(); $parser = &$this->_createParser($reporter); if (! $parser->parse($shell->getOutput())) { trigger_error('Cannot parse incoming XML from [' . $this->_dry_command . ']'); return false; } $this->_size = $reporter->getTestCaseCount(); } return $this->_size; } function &_createParser(&$reporter) { return new SimpleTestXmlParser($reporter); } }   if (! defined('TYPE_MATTERS')) { define('TYPE_MATTERS', true); } class SimpleDumper { function describeValue($value) { $type = $this->getType($value); switch($type) { case "Null": return "NULL"; case "Boolean": return "Boolean: " . ($value ? "true" : "false"); case "Array": return "Array: " . count($value) . " items"; case "Object": return "Object: of " . get_class($value); case "String": return "String: " . $this->clipString($value, 200); default: return "$type: $value"; } return "Unknown"; } function getType($value) { if (! isset($value)) { return "Null"; } elseif (is_bool($value)) { return "Boolean"; } elseif (is_string($value)) { return "String"; } elseif (is_integer($value)) { return "Integer"; } elseif (is_float($value)) { return "Float"; } elseif (is_array($value)) { return "Array"; } elseif (is_resource($value)) { return "Resource"; } elseif (is_object($value)) { return "Object"; } return "Unknown"; } function describeDifference($first, $second, $identical = false) { if ($identical) { if (! $this->_isTypeMatch($first, $second)) { return "with type mismatch as [" . $this->describeValue($first) . "] does not match [" . $this->describeValue($second) . "]"; } } $type = $this->getType($first); if ($type == "Unknown") { return "with unknown type"; } $method = '_describe' . $type . 'Difference'; return $this->$method($first, $second, $identical); } function _isTypeMatch($first, $second) { return ($this->getType($first) == $this->getType($second)); } function clipString($value, $size, $position = 0) { $length = strlen($value); if ($length <= $size) { return $value; } $position = min($position, $length); $start = ($size/2 > $position ? 0 : $position - $size/2); if ($start + $size > $length) { $start = $length - $size; } $value = substr($value, $start, $size); return ($start > 0 ? "..." : "") . $value . ($start + $size < $length ? "..." : ""); } function _describeGenericDifference($first, $second) { return "as [" . $this->describeValue($first) . "] does not match [" . $this->describeValue($second) . "]"; } function _describeNullDifference($first, $second, $identical) { return $this->_describeGenericDifference($first, $second); } function _describeBooleanDifference($first, $second, $identical) { return $this->_describeGenericDifference($first, $second); } function _describeStringDifference($first, $second, $identical) { if (is_object($second) || is_array($second)) { return $this->_describeGenericDifference($first, $second); } $position = $this->_stringDiffersAt($first, $second); $message = "at character $position"; $message .= " with [" . $this->clipString($first, 200, $position) . "] and [" . $this->clipString($second, 200, $position) . "]"; return $message; } function _describeIntegerDifference($first, $second, $identical) { if (is_object($second) || is_array($second)) { return $this->_describeGenericDifference($first, $second); } return "because [" . $this->describeValue($first) . "] differs from [" . $this->describeValue($second) . "] by " . abs($first - $second); } function _describeFloatDifference($first, $second, $identical) { if (is_object($second) || is_array($second)) { return $this->_describeGenericDifference($first, $second); } return "because [" . $this->describeValue($first) . "] differs from [" . $this->describeValue($second) . "] by " . abs($first - $second); } function _describeArrayDifference($first, $second, $identical) { if (! is_array($second)) { return $this->_describeGenericDifference($first, $second); } if (! $this->_isMatchingKeys($first, $second, $identical)) { return "as key list [" . implode(", ", array_keys($first)) . "] does not match key list [" . implode(", ", array_keys($second)) . "]"; } foreach (array_keys($first) as $key) { if ($identical && ($first[$key] === $second[$key])) { continue; } if (! $identical && ($first[$key] == $second[$key])) { continue; } return "with member [$key] " . $this->describeDifference( $first[$key], $second[$key], $identical); } return ""; } function _isMatchingKeys($first, $second, $identical) { $first_keys = array_keys($first); $second_keys = array_keys($second); if ($identical) { return ($first_keys === $second_keys); } sort($first_keys); sort($second_keys); return ($first_keys == $second_keys); } function _describeResourceDifference($first, $second, $identical) { return $this->_describeGenericDifference($first, $second); } function _describeObjectDifference($first, $second, $identical) { if (! is_object($second)) { return $this->_describeGenericDifference($first, $second); } return $this->_describeArrayDifference( get_object_vars($first), get_object_vars($second), $identical); } function _stringDiffersAt($first, $second) { if (! $first || ! $second) { return 0; } if (strlen($first) < strlen($second)) { list($first, $second) = array($second, $first); } $position = 0; $step = strlen($first); while ($step > 1) { $step = (integer)(($step + 1) / 2); if (strncmp($first, $second, $position + $step) == 0) { $position += $step; } } return $position; } function dump($variable) { ob_start(); print_r($variable); $formatted = ob_get_contents(); ob_end_clean(); return $formatted; } }   class SimpleEncodedPair { var $_key; var $_value; function SimpleEncodedPair($key, $value) { $this->_key = $key; $this->_value = $value; } function asRequest() { return urlencode($this->_key) . '=' . urlencode($this->_value); } function asMime() { $part = 'Content-Disposition: form-data; '; $part .= "name=\"" . $this->_key . "\"\r\n"; $part .= "\r\n" . $this->_value; return $part; } function isKey($key) { return $key == $this->_key; } function getKey() { return $this->_key; } function getValue() { return $this->_value; } } class SimpleAttachment { var $_key; var $_content; var $_filename; function SimpleAttachment($key, $content, $filename) { $this->_key = $key; $this->_content = $content; $this->_filename = $filename; } function asRequest() { return ''; } function asMime() { $part = 'Content-Disposition: form-data; '; $part .= 'name="' . $this->_key . '"; '; $part .= 'filename="' . $this->_filename . '"'; $part .= "\r\nContent-Type: " . $this->_deduceMimeType(); $part .= "\r\n\r\n" . $this->_content; return $part; } function _deduceMimeType() { if ($this->_isOnlyAscii($this->_content)) { return 'text/plain'; } return 'application/octet-stream'; } function _isOnlyAscii($ascii) { for ($i = 0, $length = strlen($ascii); $i < $length; $i++) { if (ord($ascii[$i]) > 127) { return false; } } return true; } function isKey($key) { return $key == $this->_key; } function getKey() { return $this->_key; } function getValue() { return $this->_filename; } } class SimpleEncoding { var $_request; function SimpleEncoding($query = false) { if (! $query) { $query = array(); } $this->clear(); $this->merge($query); } function clear() { $this->_request = array(); } function add($key, $value) { if ($value === false) { return; } if (is_array($value)) { foreach ($value as $item) { $this->_addPair($key, $item); } } else { $this->_addPair($key, $value); } } function _addPair($key, $value) { $this->_request[] = new SimpleEncodedPair($key, $value); } function attach($key, $content, $filename) { $this->_request[] = new SimpleAttachment($key, $content, $filename); } function merge($query) { if (is_object($query)) { $this->_request = array_merge($this->_request, $query->getAll()); } elseif (is_array($query)) { foreach ($query as $key => $value) { $this->add($key, $value); } } } function getValue($key) { $values = array(); foreach ($this->_request as $pair) { if ($pair->isKey($key)) { $values[] = $pair->getValue(); } } if (count($values) == 0) { return false; } elseif (count($values) == 1) { return $values[0]; } else { return $values; } } function getAll() { return $this->_request; } function _encode() { $statements = array(); foreach ($this->_request as $pair) { if ($statement = $pair->asRequest()) { $statements[] = $statement; } } return implode('&', $statements); } } class SimpleGetEncoding extends SimpleEncoding { function SimpleGetEncoding($query = false) { $this->SimpleEncoding($query); } function getMethod() { return 'GET'; } function writeHeadersTo(&$socket) { } function writeTo(&$socket) { } function asUrlRequest() { return $this->_encode(); } } class SimpleHeadEncoding extends SimpleGetEncoding { function SimpleHeadEncoding($query = false) { $this->SimpleGetEncoding($query); } function getMethod() { return 'HEAD'; } } class SimplePostEncoding extends SimpleEncoding { function SimplePostEncoding($query = false) { if (is_array($query) and $this->hasMoreThanOneLevel($query)) { $query = $this->rewriteArrayWithMultipleLevels($query); } $this->SimpleEncoding($query); } function hasMoreThanOneLevel($query) { foreach ($query as $key => $value) { if (is_array($value)) { return true; } } return false; } function rewriteArrayWithMultipleLevels($query) { $query_ = array(); foreach ($query as $key => $value) { if (is_array($value)) { foreach ($value as $sub_key => $sub_value) { $query_[$key."[".$sub_key."]"] = $sub_value; } } else { $query_[$key] = $value; } } if ($this->hasMoreThanOneLevel($query_)) { $query_ = $this->rewriteArrayWithMultipleLevels($query_); } return $query_; } function getMethod() { return 'POST'; } function writeHeadersTo(&$socket) { $socket->write("Content-Length: " . (integer)strlen($this->_encode()) . "\r\n"); $socket->write("Content-Type: application/x-www-form-urlencoded\r\n"); } function writeTo(&$socket) { $socket->write($this->_encode()); } function asUrlRequest() { return ''; } } class SimpleMultipartEncoding extends SimplePostEncoding { var $_boundary; function SimpleMultipartEncoding($query = false, $boundary = false) { $this->SimplePostEncoding($query); $this->_boundary = ($boundary === false ? uniqid('st') : $boundary); } function writeHeadersTo(&$socket) { $socket->write("Content-Length: " . (integer)strlen($this->_encode()) . "\r\n"); $socket->write("Content-Type: multipart/form-data, boundary=" . $this->_boundary . "\r\n"); } function writeTo(&$socket) { $socket->write($this->_encode()); } function _encode() { $stream = ''; foreach ($this->_request as $pair) { $stream .= "--" . $this->_boundary . "\r\n"; $stream .= $pair->asMime() . "\r\n"; } $stream .= "--" . $this->_boundary . "--\r\n"; return $stream; } }   if (! defined('E_STRICT')) { define('E_STRICT', 2048); } class SimpleErrorTrappingInvoker extends SimpleInvokerDecorator { function SimpleErrorTrappingInvoker(&$invoker) { $this->SimpleInvokerDecorator($invoker); } function invoke($method) { $queue = &$this->_createErrorQueue(); set_error_handler('SimpleTestErrorHandler'); parent::invoke($method); restore_error_handler(); $queue->tally(); } function &_createErrorQueue() { $context = &SimpleTest::getContext(); $test = &$this->getTestCase(); $queue = &$context->get('SimpleErrorQueue'); $queue->setTestCase($test); return $queue; } } class SimpleErrorQueue { var $_queue; var $_expectation_queue; var $_test; var $_using_expect_style = false; function SimpleErrorQueue() { $this->clear(); } function clear() { $this->_queue = array(); $this->_expectation_queue = array(); } function setTestCase(&$test) { $this->_test = &$test; } function expectError($expected, $message) { $this->_using_expect_style = true; array_push($this->_expectation_queue, array($expected, $message)); } function add($severity, $content, $filename, $line) { $content = str_replace('%', '%%', $content); if ($this->_using_expect_style) { $this->_testLatestError($severity, $content, $filename, $line); } else { array_push( $this->_queue, array($severity, $content, $filename, $line)); } } function tally() { while (list($severity, $message, $file, $line) = $this->extract()) { $severity = $this->getSeverityAsString($severity); $this->_test->error($severity, $message, $file, $line); } while (list($expected, $message) = $this->_extractExpectation()) { $this->_test->assert($expected, false, "%s -> Expected error not caught"); } } function _testLatestError($severity, $content, $filename, $line) { if ($expectation = $this->_extractExpectation()) { list($expected, $message) = $expectation; $this->_test->assert($expected, $content, sprintf( $message, "%s -> PHP error [$content] severity [" . $this->getSeverityAsString($severity) . "] in [$filename] line [$line]")); } else { $this->_test->error($severity, $content, $filename, $line); } } function extract() { if (count($this->_queue)) { return array_shift($this->_queue); } return false; } function _extractExpectation() { if (count($this->_expectation_queue)) { return array_shift($this->_expectation_queue); } return false; } function assertNoErrors($message) { return $this->_test->assert( new TrueExpectation(), count($this->_queue) == 0, sprintf($message, 'Should be no errors')); } function assertError($expected, $message) { if (count($this->_queue) == 0) { $this->_test->fail(sprintf($message, 'Expected error not found')); return false; } list($severity, $content, $file, $line) = $this->extract(); $severity = $this->getSeverityAsString($severity); return $this->_test->assert( $expected, $content, sprintf($message, "Expected PHP error [$content] severity [$severity] in [$file] line [$line]")); } function getSeverityAsString($severity) { static $map = array( E_STRICT => 'E_STRICT', E_ERROR => 'E_ERROR', E_WARNING => 'E_WARNING', E_PARSE => 'E_PARSE', E_NOTICE => 'E_NOTICE', E_CORE_ERROR => 'E_CORE_ERROR', E_CORE_WARNING => 'E_CORE_WARNING', E_COMPILE_ERROR => 'E_COMPILE_ERROR', E_COMPILE_WARNING => 'E_COMPILE_WARNING', E_USER_ERROR => 'E_USER_ERROR', E_USER_WARNING => 'E_USER_WARNING', E_USER_NOTICE => 'E_USER_NOTICE'); if (defined('E_RECOVERABLE_ERROR')) { $map[E_RECOVERABLE_ERROR] = 'E_RECOVERABLE_ERROR'; } if (defined('E_DEPRECATED')) { $map[E_DEPRECATED] = 'E_DEPRECATED'; } return $map[$severity]; } } function SimpleTestErrorHandler($severity, $message, $filename = null, $line = null, $super_globals = null, $mask = null) { $severity = $severity & error_reporting(); if ($severity) { restore_error_handler(); if (ini_get('log_errors')) { $label = SimpleErrorQueue::getSeverityAsString($severity); error_log("$label: $message in $filename on line $line"); } $context = &SimpleTest::getContext(); $queue = &$context->get('SimpleErrorQueue'); $queue->add($severity, $message, $filename, $line); set_error_handler('SimpleTestErrorHandler'); } return true; }   class SimpleExceptionTrappingInvoker extends SimpleInvokerDecorator { function SimpleExceptionTrappingInvoker($invoker) { $this->SimpleInvokerDecorator($invoker); } function invoke($method) { $trap = SimpleTest::getContext()->get('SimpleExceptionTrap'); $trap->clear(); try { $has_thrown = false; parent::invoke($method); } catch (Exception $exception) { $has_thrown = true; if (! $trap->isExpected($this->getTestCase(), $exception)) { $this->getTestCase()->exception($exception); } $trap->clear(); } if ($message = $trap->getOutstanding()) { $this->getTestCase()->fail($message); } if ($has_thrown) { try { parent::getTestCase()->tearDown(); } catch (Exception $e) { } } } } class ExceptionExpectation extends SimpleExpectation { private $expected; function __construct($expected, $message = '%s') { $this->expected = $expected; parent::__construct($message); } function test($compare) { if (is_string($this->expected)) { return ($compare instanceof $this->expected); } if (get_class($compare) != get_class($this->expected)) { return false; } return $compare->getMessage() == $this->expected->getMessage(); } function testMessage($compare) { if (is_string($this->expected)) { return "Exception [" . $this->describeException($compare) . "] should be type [" . $this->expected . "]"; } return "Exception [" . $this->describeException($compare) . "] should match [" . $this->describeException($this->expected) . "]"; } protected function describeException($exception) { return get_class($exception) . ": " . $exception->getMessage(); } } class SimpleExceptionTrap { private $expected; private $message; function __construct() { $this->clear(); } function expectException($expected = false, $message = '%s') { if ($expected === false) { $expected = new AnythingExpectation(); } if (! SimpleExpectation::isExpectation($expected)) { $expected = new ExceptionExpectation($expected); } $this->expected = $expected; $this->message = $message; } function isExpected($test, $exception) { if ($this->expected) { return $test->assert($this->expected, $exception, $this->message); } return false; } function getOutstanding() { return sprintf($this->message, 'Failed to trap exception'); } function clear() { $this->expected = false; $this->message = false; } }   class SimpleExpectation { var $_dumper = false; var $_message; function SimpleExpectation($message = '%s') { $this->_message = $message; } function test($compare) { } function testMessage($compare) { } function overlayMessage($compare, $dumper) { $this->_dumper = $dumper; return sprintf($this->_message, $this->testMessage($compare)); } function &_getDumper() { if (! $this->_dumper) { $dumper = &new SimpleDumper(); return $dumper; } return $this->_dumper; } function isExpectation($expectation) { return is_object($expectation) && SimpleTestCompatibility::isA($expectation, 'SimpleExpectation'); } } class AnythingExpectation extends SimpleExpectation { function test($compare) { return true; } function testMessage($compare) { $dumper = &$this->_getDumper(); return 'Anything always matches [' . $dumper->describeValue($compare) . ']'; } } class FailedExpectation extends SimpleExpectation { function test($compare) { return false; } function testMessage($compare) { $dumper = &$this->_getDumper(); return 'Failed expectation never matches [' . $dumper->describeValue($compare) . ']'; } } class TrueExpectation extends SimpleExpectation { function test($compare) { return (boolean)$compare; } function testMessage($compare) { $dumper = &$this->_getDumper(); return 'Expected true, got [' . $dumper->describeValue($compare) . ']'; } } class FalseExpectation extends SimpleExpectation { function test($compare) { return ! (boolean)$compare; } function testMessage($compare) { $dumper = &$this->_getDumper(); return 'Expected false, got [' . $dumper->describeValue($compare) . ']'; } } class EqualExpectation extends SimpleExpectation { var $_value; function EqualExpectation($value, $message = '%s') { $this->SimpleExpectation($message); $this->_value = $value; } function test($compare) { return (($this->_value == $compare) && ($compare == $this->_value)); } function testMessage($compare) { if ($this->test($compare)) { return "Equal expectation [" . $this->_dumper->describeValue($this->_value) . "]"; } else { return "Equal expectation fails " . $this->_dumper->describeDifference($this->_value, $compare); } } function _getValue() { return $this->_value; } } class NotEqualExpectation extends EqualExpectation { function NotEqualExpectation($value, $message = '%s') { $this->EqualExpectation($value, $message); } function test($compare) { return ! parent::test($compare); } function testMessage($compare) { $dumper = &$this->_getDumper(); if ($this->test($compare)) { return "Not equal expectation passes " . $dumper->describeDifference($this->_getValue(), $compare); } else { return "Not equal expectation fails [" . $dumper->describeValue($this->_getValue()) . "] matches"; } } } class WithinMarginExpectation extends SimpleExpectation { var $_upper; var $_lower; function WithinMarginExpectation($value, $margin, $message = '%s') { $this->SimpleExpectation($message); $this->_upper = $value + $margin; $this->_lower = $value - $margin; } function test($compare) { return (($compare <= $this->_upper) && ($compare >= $this->_lower)); } function testMessage($compare) { if ($this->test($compare)) { return $this->_withinMessage($compare); } else { return $this->_outsideMessage($compare); } } function _withinMessage($compare) { return "Within expectation [" . $this->_dumper->describeValue($this->_lower) . "] and [" . $this->_dumper->describeValue($this->_upper) . "]"; } function _outsideMessage($compare) { if ($compare > $this->_upper) { return "Outside expectation " . $this->_dumper->describeDifference($compare, $this->_upper); } else { return "Outside expectation " . $this->_dumper->describeDifference($compare, $this->_lower); } } } class OutsideMarginExpectation extends WithinMarginExpectation { function OutsideMarginExpectation($value, $margin, $message = '%s') { $this->WithinMarginExpectation($value, $margin, $message); } function test($compare) { return ! parent::test($compare); } function testMessage($compare) { if (! $this->test($compare)) { return $this->_withinMessage($compare); } else { return $this->_outsideMessage($compare); } } } class ReferenceExpectation extends SimpleExpectation { var $_value; function ReferenceExpectation(&$value, $message = '%s') { $this->SimpleExpectation($message); $this->_value =& $value; } function test(&$compare) { return SimpleTestCompatibility::isReference($this->_value, $compare); } function testMessage($compare) { if ($this->test($compare)) { return "Reference expectation [" . $this->_dumper->describeValue($this->_value) . "]"; } else { return "Reference expectation fails " . $this->_dumper->describeDifference($this->_value, $compare); } } function _getValue() { return $this->_value; } } class IdenticalExpectation extends EqualExpectation { function IdenticalExpectation($value, $message = '%s') { $this->EqualExpectation($value, $message); } function test($compare) { return SimpleTestCompatibility::isIdentical($this->_getValue(), $compare); } function testMessage($compare) { $dumper = &$this->_getDumper(); if ($this->test($compare)) { return "Identical expectation [" . $dumper->describeValue($this->_getValue()) . "]"; } else { return "Identical expectation [" . $dumper->describeValue($this->_getValue()) . "] fails with [" . $dumper->describeValue($compare) . "] " . $dumper->describeDifference($this->_getValue(), $compare, TYPE_MATTERS); } } } class NotIdenticalExpectation extends IdenticalExpectation { function NotIdenticalExpectation($value, $message = '%s') { $this->IdenticalExpectation($value, $message); } function test($compare) { return ! parent::test($compare); } function testMessage($compare) { $dumper = &$this->_getDumper(); if ($this->test($compare)) { return "Not identical expectation passes " . $dumper->describeDifference($this->_getValue(), $compare, TYPE_MATTERS); } else { return "Not identical expectation [" . $dumper->describeValue($this->_getValue()) . "] matches"; } } } class PatternExpectation extends SimpleExpectation { var $_pattern; function PatternExpectation($pattern, $message = '%s') { $this->SimpleExpectation($message); $this->_pattern = $pattern; } function _getPattern() { return $this->_pattern; } function test($compare) { return (boolean)preg_match($this->_getPattern(), $compare); } function testMessage($compare) { if ($this->test($compare)) { return $this->_describePatternMatch($this->_getPattern(), $compare); } else { $dumper = &$this->_getDumper(); return "Pattern [" . $this->_getPattern() . "] not detected in [" . $dumper->describeValue($compare) . "]"; } } function _describePatternMatch($pattern, $subject) { preg_match($pattern, $subject, $matches); $position = strpos($subject, $matches[0]); $dumper = $this->_getDumper(); return "Pattern [$pattern] detected at character [$position] in [" . $dumper->describeValue($subject) . "] as [" . $matches[0] . "] in region [" . $dumper->clipString($subject, 100, $position) . "]"; } } class WantedPatternExpectation extends PatternExpectation { } class NoPatternExpectation extends PatternExpectation { function NoPatternExpectation($pattern, $message = '%s') { $this->PatternExpectation($pattern, $message); } function test($compare) { return ! parent::test($compare); } function testMessage($compare) { if ($this->test($compare)) { $dumper = &$this->_getDumper(); return "Pattern [" . $this->_getPattern() . "] not detected in [" . $dumper->describeValue($compare) . "]"; } else { return $this->_describePatternMatch($this->_getPattern(), $compare); } } } class UnwantedPatternExpectation extends NoPatternExpectation { } class IsAExpectation extends SimpleExpectation { var $_type; function IsAExpectation($type, $message = '%s') { $this->SimpleExpectation($message); $this->_type = $type; } function _getType() { return $this->_type; } function test($compare) { if (is_object($compare)) { return SimpleTestCompatibility::isA($compare, $this->_type); } else { return (strtolower(gettype($compare)) == $this->_canonicalType($this->_type)); } } function _canonicalType($type) { $type = strtolower($type); $map = array( 'bool' => 'boolean', 'float' => 'double', 'real' => 'double', 'int' => 'integer'); if (isset($map[$type])) { $type = $map[$type]; } return $type; } function testMessage($compare) { $dumper = &$this->_getDumper(); return "Value [" . $dumper->describeValue($compare) . "] should be type [" . $this->_type . "]"; } } class NotAExpectation extends IsAExpectation { var $_type; function NotAExpectation($type, $message = '%s') { $this->IsAExpectation($type, $message); } function test($compare) { return ! parent::test($compare); } function testMessage($compare) { $dumper = &$this->_getDumper(); return "Value [" . $dumper->describeValue($compare) . "] should not be type [" . $this->_getType() . "]"; } } class MethodExistsExpectation extends SimpleExpectation { var $_method; function MethodExistsExpectation($method, $message = '%s') { $this->SimpleExpectation($message); $this->_method = &$method; } function test($compare) { return (boolean)(is_object($compare) && method_exists($compare, $this->_method)); } function testMessage($compare) { $dumper = &$this->_getDumper(); if (! is_object($compare)) { return 'No method on non-object [' . $dumper->describeValue($compare) . ']'; } $method = $this->_method; return "Object [" . $dumper->describeValue($compare) . "] should contain method [$method]"; } }   class SimpleForm { var $_method; var $_action; var $_encoding; var $_default_target; var $_id; var $_buttons; var $_images; var $_widgets; var $_radios; var $_checkboxes; function SimpleForm($tag, &$page) { $this->_method = $tag->getAttribute('method'); $this->_action = $this->_createAction($tag->getAttribute('action'), $page); $this->_encoding = $this->_setEncodingClass($tag); $this->_default_target = false; $this->_id = $tag->getAttribute('id'); $this->_buttons = array(); $this->_images = array(); $this->_widgets = array(); $this->_radios = array(); $this->_checkboxes = array(); } function _setEncodingClass($tag) { if (strtolower($tag->getAttribute('method')) == 'post') { if (strtolower($tag->getAttribute('enctype')) == 'multipart/form-data') { return 'SimpleMultipartEncoding'; } return 'SimplePostEncoding'; } return 'SimpleGetEncoding'; } function setDefaultTarget($frame) { $this->_default_target = $frame; } function getMethod() { return ($this->_method ? strtolower($this->_method) : 'get'); } function _createAction($action, &$page) { if (($action === '') || ($action === false)) { return $page->expandUrl($page->getUrl()); } return $page->expandUrl(new SimpleUrl($action));; } function getAction() { $url = $this->_action; if ($this->_default_target && ! $url->getTarget()) { $url->setTarget($this->_default_target); } return $url; } function _encode() { $class = $this->_encoding; $encoding = new $class(); for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { $this->_widgets[$i]->write($encoding); } return $encoding; } function getId() { return $this->_id; } function addWidget(&$tag) { if (strtolower($tag->getAttribute('type')) == 'submit') { $this->_buttons[] = &$tag; } elseif (strtolower($tag->getAttribute('type')) == 'image') { $this->_images[] = &$tag; } elseif ($tag->getName()) { $this->_setWidget($tag); } } function _setWidget(&$tag) { if (strtolower($tag->getAttribute('type')) == 'radio') { $this->_addRadioButton($tag); } elseif (strtolower($tag->getAttribute('type')) == 'checkbox') { $this->_addCheckbox($tag); } else { $this->_widgets[] = &$tag; } } function _addRadioButton(&$tag) { if (! isset($this->_radios[$tag->getName()])) { $this->_widgets[] = &new SimpleRadioGroup(); $this->_radios[$tag->getName()] = count($this->_widgets) - 1; } $this->_widgets[$this->_radios[$tag->getName()]]->addWidget($tag); } function _addCheckbox(&$tag) { if (! isset($this->_checkboxes[$tag->getName()])) { $this->_widgets[] = &$tag; $this->_checkboxes[$tag->getName()] = count($this->_widgets) - 1; } else { $index = $this->_checkboxes[$tag->getName()]; if (! SimpleTestCompatibility::isA($this->_widgets[$index], 'SimpleCheckboxGroup')) { $previous = &$this->_widgets[$index]; $this->_widgets[$index] = &new SimpleCheckboxGroup(); $this->_widgets[$index]->addWidget($previous); } $this->_widgets[$index]->addWidget($tag); } } function getValue($selector) { for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($selector->isMatch($this->_widgets[$i])) { return $this->_widgets[$i]->getValue(); } } foreach ($this->_buttons as $button) { if ($selector->isMatch($button)) { return $button->getValue(); } } return null; } function setField($selector, $value, $position=false) { $success = false; $_position = 0; for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($selector->isMatch($this->_widgets[$i])) { $_position++; if ($position === false or $_position === (int)$position) { if ($this->_widgets[$i]->setValue($value)) { $success = true; } } } } return $success; } function attachLabelBySelector($selector, $label) { for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($selector->isMatch($this->_widgets[$i])) { if (method_exists($this->_widgets[$i], 'setLabel')) { $this->_widgets[$i]->setLabel($label); return; } } } } function hasSubmit($selector) { foreach ($this->_buttons as $button) { if ($selector->isMatch($button)) { return true; } } return false; } function hasImage($selector) { foreach ($this->_images as $image) { if ($selector->isMatch($image)) { return true; } } return false; } function submitButton($selector, $additional = false) { $additional = $additional ? $additional : array(); foreach ($this->_buttons as $button) { if ($selector->isMatch($button)) { $encoding = $this->_encode(); $button->write($encoding); if ($additional) { $encoding->merge($additional); } return $encoding; } } return false; } function submitImage($selector, $x, $y, $additional = false) { $additional = $additional ? $additional : array(); foreach ($this->_images as $image) { if ($selector->isMatch($image)) { $encoding = $this->_encode(); $image->write($encoding, $x, $y); if ($additional) { $encoding->merge($additional); } return $encoding; } } return false; } function submit() { return $this->_encode(); } }   class SimpleFrameset { var $_frameset; var $_frames; var $_focus; var $_names; function SimpleFrameset(&$page) { $this->_frameset = &$page; $this->_frames = array(); $this->_focus = false; $this->_names = array(); } function addFrame(&$page, $name = false) { $this->_frames[] = &$page; if ($name) { $this->_names[$name] = count($this->_frames) - 1; } } function setFrame($path, &$page) { $name = array_shift($path); if (isset($this->_names[$name])) { $index = $this->_names[$name]; } else { $index = $name - 1; } if (count($path) == 0) { $this->_frames[$index] = &$page; return; } $this->_frames[$index]->setFrame($path, $page); } function getFrameFocus() { if ($this->_focus === false) { return array(); } return array_merge( array($this->_getPublicNameFromIndex($this->_focus)), $this->_frames[$this->_focus]->getFrameFocus()); } function _getPublicNameFromIndex($subject) { foreach ($this->_names as $name => $index) { if ($subject == $index) { return $name; } } return $subject + 1; } function setFrameFocusByIndex($choice) { if (is_integer($this->_focus)) { if ($this->_frames[$this->_focus]->hasFrames()) { return $this->_frames[$this->_focus]->setFrameFocusByIndex($choice); } } if (($choice < 1) || ($choice > count($this->_frames))) { return false; } $this->_focus = $choice - 1; return true; } function setFrameFocus($name) { if (is_integer($this->_focus)) { if ($this->_frames[$this->_focus]->hasFrames()) { return $this->_frames[$this->_focus]->setFrameFocus($name); } } if (in_array($name, array_keys($this->_names))) { $this->_focus = $this->_names[$name]; return true; } return false; } function clearFrameFocus() { $this->_focus = false; $this->_clearNestedFramesFocus(); } function _clearNestedFramesFocus() { for ($i = 0; $i < count($this->_frames); $i++) { $this->_frames[$i]->clearFrameFocus(); } } function hasFrames() { return true; } function getFrames() { $report = array(); for ($i = 0; $i < count($this->_frames); $i++) { $report[$this->_getPublicNameFromIndex($i)] = $this->_frames[$i]->getFrames(); } return $report; } function getRaw() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRaw(); } $raw = ''; for ($i = 0; $i < count($this->_frames); $i++) { $raw .= $this->_frames[$i]->getRaw(); } return $raw; } function getText() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getText(); } $raw = ''; for ($i = 0; $i < count($this->_frames); $i++) { $raw .= ' ' . $this->_frames[$i]->getText(); } return trim($raw); } function getTransportError() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getTransportError(); } return $this->_frameset->getTransportError(); } function getMethod() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getMethod(); } return $this->_frameset->getMethod(); } function getUrl() { if (is_integer($this->_focus)) { $url = $this->_frames[$this->_focus]->getUrl(); $url->setTarget($this->_getPublicNameFromIndex($this->_focus)); } else { $url = $this->_frameset->getUrl(); } return $url; } function getBaseUrl() { if (is_integer($this->_focus)) { $url = $this->_frames[$this->_focus]->getBaseUrl(); } else { $url = $this->_frameset->getBaseUrl(); } return $url; } function expandUrl($url) { return $this->_frameset->expandUrl($url); } function getRequestData() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRequestData(); } return $this->_frameset->getRequestData(); } function getMimeType() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getMimeType(); } return $this->_frameset->getMimeType(); } function getResponseCode() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getResponseCode(); } return $this->_frameset->getResponseCode(); } function getAuthentication() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getAuthentication(); } return $this->_frameset->getAuthentication(); } function getRealm() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRealm(); } return $this->_frameset->getRealm(); } function getRequest() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRequest(); } return $this->_frameset->getRequest(); } function getHeaders() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getHeaders(); } return $this->_frameset->getHeaders(); } function getTitle() { return $this->_frameset->getTitle(); } function getUrls() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getUrls(); } $urls = array(); foreach ($this->_frames as $frame) { $urls = array_merge($urls, $frame->getUrls()); } return array_values(array_unique($urls)); } function getUrlsByLabel($label) { if (is_integer($this->_focus)) { return $this->_tagUrlsWithFrame( $this->_frames[$this->_focus]->getUrlsByLabel($label), $this->_focus); } $urls = array(); foreach ($this->_frames as $index => $frame) { $urls = array_merge( $urls, $this->_tagUrlsWithFrame( $frame->getUrlsByLabel($label), $index)); } return $urls; } function getUrlById($id) { foreach ($this->_frames as $index => $frame) { if ($url = $frame->getUrlById($id)) { if (! $url->gettarget()) { $url->setTarget($this->_getPublicNameFromIndex($index)); } return $url; } } return false; } function _tagUrlsWithFrame($urls, $frame) { $tagged = array(); foreach ($urls as $url) { if (! $url->getTarget()) { $url->setTarget($this->_getPublicNameFromIndex($frame)); } $tagged[] = $url; } return $tagged; } function &getFormBySubmit($selector) { $form = &$this->_findForm('getFormBySubmit', $selector); return $form; } function &getFormByImage($selector) { $form = &$this->_findForm('getFormByImage', $selector); return $form; } function &getFormById($id) { $form = &$this->_findForm('getFormById', $id); return $form; } function &_findForm($method, $attribute) { if (is_integer($this->_focus)) { $form = &$this->_findFormInFrame( $this->_frames[$this->_focus], $this->_focus, $method, $attribute); return $form; } for ($i = 0; $i < count($this->_frames); $i++) { $form = &$this->_findFormInFrame( $this->_frames[$i], $i, $method, $attribute); if ($form) { return $form; } } $null = null; return $null; } function &_findFormInFrame(&$page, $index, $method, $attribute) { $form = &$this->_frames[$index]->$method($attribute); if (isset($form)) { $form->setDefaultTarget($this->_getPublicNameFromIndex($index)); } return $form; } function setField($selector, $value) { if (is_integer($this->_focus)) { $this->_frames[$this->_focus]->setField($selector, $value); } else { for ($i = 0; $i < count($this->_frames); $i++) { $this->_frames[$i]->setField($selector, $value); } } } function getField($selector) { for ($i = 0; $i < count($this->_frames); $i++) { $value = $this->_frames[$i]->getField($selector); if (isset($value)) { return $value; } } return null; } }   class SimpleRoute { var $_url; function SimpleRoute($url) { $this->_url = $url; } function getUrl() { return $this->_url; } function _getRequestLine($method) { return $method . ' ' . $this->_url->getPath() . $this->_url->getEncodedRequest() . ' HTTP/1.0'; } function _getHostLine() { $line = 'Host: ' . $this->_url->getHost(); if ($this->_url->getPort()) { $line .= ':' . $this->_url->getPort(); } return $line; } function &createConnection($method, $timeout) { $default_port = ('https' == $this->_url->getScheme()) ? 443 : 80; $socket = &$this->_createSocket( $this->_url->getScheme() ? $this->_url->getScheme() : 'http', $this->_url->getHost(), $this->_url->getPort() ? $this->_url->getPort() : $default_port, $timeout); if (! $socket->isError()) { $socket->write($this->_getRequestLine($method) . "\r\n"); $socket->write($this->_getHostLine() . "\r\n"); $socket->write("Connection: close\r\n"); } return $socket; } function &_createSocket($scheme, $host, $port, $timeout) { if (in_array($scheme, array('https'))) { $socket = &new SimpleSecureSocket($host, $port, $timeout); } else { $socket = &new SimpleSocket($host, $port, $timeout); } return $socket; } } class SimpleProxyRoute extends SimpleRoute { var $_proxy; var $_username; var $_password; function SimpleProxyRoute($url, $proxy, $username = false, $password = false) { $this->SimpleRoute($url); $this->_proxy = $proxy; $this->_username = $username; $this->_password = $password; } function _getRequestLine($method) { $url = $this->getUrl(); $scheme = $url->getScheme() ? $url->getScheme() : 'http'; $port = $url->getPort() ? ':' . $url->getPort() : ''; return $method . ' ' . $scheme . '://' . $url->getHost() . $port . $url->getPath() . $url->getEncodedRequest() . ' HTTP/1.0'; } function _getHostLine() { $host = 'Host: ' . $this->_proxy->getHost(); $port = $this->_proxy->getPort() ? $this->_proxy->getPort() : 8080; return "$host:$port"; } function &createConnection($method, $timeout) { $socket = &$this->_createSocket( $this->_proxy->getScheme() ? $this->_proxy->getScheme() : 'http', $this->_proxy->getHost(), $this->_proxy->getPort() ? $this->_proxy->getPort() : 8080, $timeout); if ($socket->isError()) { return $socket; } $socket->write($this->_getRequestLine($method) . "\r\n"); $socket->write($this->_getHostLine() . "\r\n"); if ($this->_username && $this->_password) { $socket->write('Proxy-Authorization: Basic ' . base64_encode($this->_username . ':' . $this->_password) . "\r\n"); } $socket->write("Connection: close\r\n"); return $socket; } } class SimpleHttpRequest { var $_route; var $_encoding; var $_headers; var $_cookies; function SimpleHttpRequest(&$route, $encoding) { $this->_route = &$route; $this->_encoding = $encoding; $this->_headers = array(); $this->_cookies = array(); } function &fetch($timeout) { $socket = &$this->_route->createConnection($this->_encoding->getMethod(), $timeout); if (! $socket->isError()) { $this->_dispatchRequest($socket, $this->_encoding); } $response = &$this->_createResponse($socket); return $response; } function _dispatchRequest(&$socket, $encoding) { foreach ($this->_headers as $header_line) { $socket->write($header_line . "\r\n"); } if (count($this->_cookies) > 0) { $socket->write("Cookie: " . implode(";", $this->_cookies) . "\r\n"); } $encoding->writeHeadersTo($socket); $socket->write("\r\n"); $encoding->writeTo($socket); } function addHeaderLine($header_line) { $this->_headers[] = $header_line; } function readCookiesFromJar($jar, $url) { $this->_cookies = $jar->selectAsPairs($url); } function &_createResponse(&$socket) { $response = &new SimpleHttpResponse( $socket, $this->_route->getUrl(), $this->_encoding); return $response; } } class SimpleHttpHeaders { var $_raw_headers; var $_response_code; var $_http_version; var $_mime_type; var $_location; var $_cookies; var $_authentication; var $_realm; function SimpleHttpHeaders($headers) { $this->_raw_headers = $headers; $this->_response_code = false; $this->_http_version = false; $this->_mime_type = ''; $this->_location = false; $this->_cookies = array(); $this->_authentication = false; $this->_realm = false; foreach (split("\r\n", $headers) as $header_line) { $this->_parseHeaderLine($header_line); } } function getHttpVersion() { return $this->_http_version; } function getRaw() { return $this->_raw_headers; } function getResponseCode() { return (integer)$this->_response_code; } function getLocation() { return $this->_location; } function isRedirect() { return in_array($this->_response_code, array(301, 302, 303, 307)) && (boolean)$this->getLocation(); } function isChallenge() { return ($this->_response_code == 401) && (boolean)$this->_authentication && (boolean)$this->_realm; } function getMimeType() { return $this->_mime_type; } function getAuthentication() { return $this->_authentication; } function getRealm() { return $this->_realm; } function writeCookiesToJar(&$jar, $url) { foreach ($this->_cookies as $cookie) { $jar->setCookie( $cookie->getName(), $cookie->getValue(), $url->getHost(), $cookie->getPath(), $cookie->getExpiry()); } } function _parseHeaderLine($header_line) { if (preg_match('/HTTP\/(\d+\.\d+)\s+(\d+)/i', $header_line, $matches)) { $this->_http_version = $matches[1]; $this->_response_code = $matches[2]; } if (preg_match('/Content-type:\s*(.*)/i', $header_line, $matches)) { $this->_mime_type = trim($matches[1]); } if (preg_match('/Location:\s*(.*)/i', $header_line, $matches)) { $this->_location = trim($matches[1]); } if (preg_match('/Set-cookie:(.*)/i', $header_line, $matches)) { $this->_cookies[] = $this->_parseCookie($matches[1]); } if (preg_match('/WWW-Authenticate:\s+(\S+)\s+realm=\"(.*?)\"/i', $header_line, $matches)) { $this->_authentication = $matches[1]; $this->_realm = trim($matches[2]); } } function _parseCookie($cookie_line) { $parts = split(";", $cookie_line); $cookie = array(); preg_match('/\s*(.*?)\s*=(.*)/', array_shift($parts), $cookie); foreach ($parts as $part) { if (preg_match('/\s*(.*?)\s*=(.*)/', $part, $matches)) { $cookie[$matches[1]] = trim($matches[2]); } } return new SimpleCookie( $cookie[1], trim($cookie[2]), isset($cookie["path"]) ? $cookie["path"] : "", isset($cookie["expires"]) ? $cookie["expires"] : false); } } class SimpleHttpResponse extends SimpleStickyError { var $_url; var $_encoding; var $_sent; var $_content; var $_headers; function SimpleHttpResponse(&$socket, $url, $encoding) { $this->SimpleStickyError(); $this->_url = $url; $this->_encoding = $encoding; $this->_sent = $socket->getSent(); $this->_content = false; $raw = $this->_readAll($socket); if ($socket->isError()) { $this->_setError('Error reading socket [' . $socket->getError() . ']'); return; } $this->_parse($raw); } function _parse($raw) { if (! $raw) { $this->_setError('Nothing fetched'); $this->_headers = &new SimpleHttpHeaders(''); } elseif (! strstr($raw, "\r\n\r\n")) { $this->_setError('Could not split headers from content'); $this->_headers = &new SimpleHttpHeaders($raw); } else { list($headers, $this->_content) = split("\r\n\r\n", $raw, 2); $this->_headers = &new SimpleHttpHeaders($headers); } } function getMethod() { return $this->_encoding->getMethod(); } function getUrl() { return $this->_url; } function getRequestData() { return $this->_encoding; } function getSent() { return $this->_sent; } function getContent() { return $this->_content; } function getHeaders() { return $this->_headers; } function getNewCookies() { return $this->_headers->getNewCookies(); } function _readAll(&$socket) { $all = ''; while (! $this->_isLastPacket($next = $socket->read())) { $all .= $next; } return $all; } function _isLastPacket($packet) { if (is_string($packet)) { return $packet === ''; } return ! $packet; } }   if (! defined('SIMPLE_TEST')) { define('SIMPLE_TEST', dirname(__FILE__) . '/'); } class SimpleInvoker { var $_test_case; function SimpleInvoker(&$test_case) { $this->_test_case = &$test_case; } function &getTestCase() { return $this->_test_case; } function before($method) { $this->_test_case->before($method); } function invoke($method) { $this->_test_case->setUp(); $this->_test_case->$method(); $this->_test_case->tearDown(); } function after($method) { $this->_test_case->after($method); } } class SimpleInvokerDecorator { var $_invoker; function SimpleInvokerDecorator(&$invoker) { $this->_invoker = &$invoker; } function &getTestCase() { return $this->_invoker->getTestCase(); } function before($method) { $this->_invoker->before($method); } function invoke($method) { $this->_invoker->invoke($method); } function after($method) { $this->_invoker->after($method); } }   if (version_compare(phpversion(), '5') >= 0) { } else { } if (! defined('MOCK_ANYTHING')) { define('MOCK_ANYTHING', '*'); } class ParametersExpectation extends SimpleExpectation { var $_expected; function ParametersExpectation($expected = false, $message = '%s') { $this->SimpleExpectation($message); $this->_expected = $expected; } function test($parameters) { if (! is_array($this->_expected)) { return true; } if (count($this->_expected) != count($parameters)) { return false; } for ($i = 0; $i < count($this->_expected); $i++) { if (! $this->_testParameter($parameters[$i], $this->_expected[$i])) { return false; } } return true; } function _testParameter($parameter, $expected) { $comparison = $this->_coerceToExpectation($expected); return $comparison->test($parameter); } function testMessage($parameters) { if ($this->test($parameters)) { return "Expectation of " . count($this->_expected) . " arguments of [" . $this->_renderArguments($this->_expected) . "] is correct"; } else { return $this->_describeDifference($this->_expected, $parameters); } } function _describeDifference($expected, $parameters) { if (count($expected) != count($parameters)) { return "Expected " . count($expected) . " arguments of [" . $this->_renderArguments($expected) . "] but got " . count($parameters) . " arguments of [" . $this->_renderArguments($parameters) . "]"; } $messages = array(); for ($i = 0; $i < count($expected); $i++) { $comparison = $this->_coerceToExpectation($expected[$i]); if (! $comparison->test($parameters[$i])) { $messages[] = "parameter " . ($i + 1) . " with [" . $comparison->overlayMessage($parameters[$i], $this->_getDumper()) . "]"; } } return "Parameter expectation differs at " . implode(" and ", $messages); } function _coerceToExpectation($expected) { if (SimpleExpectation::isExpectation($expected)) { return $expected; } return new IdenticalExpectation($expected); } function _renderArguments($args) { $descriptions = array(); if (is_array($args)) { foreach ($args as $arg) { $dumper = &new SimpleDumper(); $descriptions[] = $dumper->describeValue($arg); } } return implode(', ', $descriptions); } } class CallCountExpectation extends SimpleExpectation { var $_method; var $_count; function CallCountExpectation($method, $count, $message = '%s') { $this->_method = $method; $this->_count = $count; $this->SimpleExpectation($message); } function test($compare) { return ($this->_count == $compare); } function testMessage($compare) { return 'Expected call count for [' . $this->_method . '] was [' . $this->_count . '] got [' . $compare . ']'; } } class MinimumCallCountExpectation extends SimpleExpectation { var $_method; var $_count; function MinimumCallCountExpectation($method, $count, $message = '%s') { $this->_method = $method; $this->_count = $count; $this->SimpleExpectation($message); } function test($compare) { return ($this->_count <= $compare); } function testMessage($compare) { return 'Minimum call count for [' . $this->_method . '] was [' . $this->_count . '] got [' . $compare . ']'; } } class MaximumCallCountExpectation extends SimpleExpectation { var $_method; var $_count; function MaximumCallCountExpectation($method, $count, $message = '%s') { $this->_method = $method; $this->_count = $count; $this->SimpleExpectation($message); } function test($compare) { return ($this->_count >= $compare); } function testMessage($compare) { return 'Maximum call count for [' . $this->_method . '] was [' . $this->_count . '] got [' . $compare . ']'; } } class SimpleSignatureMap { var $_map; function SimpleSignatureMap() { $this->_map = array(); } function add($parameters, &$action) { $place = count($this->_map); $this->_map[$place] = array(); $this->_map[$place]['params'] = new ParametersExpectation($parameters); $this->_map[$place]['content'] = &$action; } function &findFirstAction($parameters) { $slot = $this->_findFirstSlot($parameters); if (isset($slot) && isset($slot['content'])) { return $slot['content']; } $null = null; return $null; } function isMatch($parameters) { return ($this->_findFirstSlot($parameters) != null); } function test(&$test, $parameters, $message) { } function &_findFirstSlot($parameters) { $count = count($this->_map); for ($i = 0; $i < $count; $i++) { if ($this->_map[$i]["params"]->test($parameters)) { return $this->_map[$i]; } } $null = null; return $null; } } class SimpleCallSchedule { var $_wildcard = MOCK_ANYTHING; var $_always; var $_at; function SimpleCallSchedule() { $this->_always = array(); $this->_at = array(); } function register($method, $args, &$action) { $args = $this->_replaceWildcards($args); $method = strtolower($method); if (! isset($this->_always[$method])) { $this->_always[$method] = new SimpleSignatureMap(); } $this->_always[$method]->add($args, $action); } function registerAt($step, $method, $args, &$action) { $args = $this->_replaceWildcards($args); $method = strtolower($method); if (! isset($this->_at[$method])) { $this->_at[$method] = array(); } if (! isset($this->_at[$method][$step])) { $this->_at[$method][$step] = new SimpleSignatureMap(); } $this->_at[$method][$step]->add($args, $action); } function expectArguments($method, $args, $message) { $args = $this->_replaceWildcards($args); $message .= Mock::getExpectationLine(); $this->_expected_args[strtolower($method)] = new ParametersExpectation($args, $message); } function &respond($step, $method, $args) { $method = strtolower($method); if (isset($this->_at[$method][$step])) { if ($this->_at[$method][$step]->isMatch($args)) { $action = &$this->_at[$method][$step]->findFirstAction($args); if (isset($action)) { return $action->act(); } } } if (isset($this->_always[$method])) { $action = &$this->_always[$method]->findFirstAction($args); if (isset($action)) { return $action->act(); } } $null = null; return $null; } function _replaceWildcards($args) { if ($args === false) { return false; } for ($i = 0; $i < count($args); $i++) { if ($args[$i] === $this->_wildcard) { $args[$i] = new AnythingExpectation(); } } return $args; } } class SimpleByReference { var $_reference; function SimpleByReference(&$reference) { $this->_reference = &$reference; } function &act() { return $this->_reference; } } class SimpleByValue { var $_value; function SimpleByValue($value) { $this->_value = $value; } function &act() { $dummy = $this->_value; return $dummy; } } class SimpleThrower { var $_exception; function SimpleThrower($exception) { $this->_exception = $exception; } function act() { eval('throw $this->_exception;'); } } class SimpleErrorThrower { var $_error; var $_severity; function SimpleErrorThrower($error, $severity) { $this->_error = $error; $this->_severity = $severity; } function &act() { trigger_error($this->_error, $this->_severity); $null = null; return $null; } } class SimpleMock { var $_actions; var $_wildcard = MOCK_ANYTHING; var $_is_strict = true; var $_call_counts; var $_expected_counts; var $_max_counts; var $_expected_args; var $_expected_args_at; function SimpleMock() { $this->_actions = &new SimpleCallSchedule(); $this->_expectations = &new SimpleCallSchedule(); $this->_call_counts = array(); $this->_expected_counts = array(); $this->_max_counts = array(); $this->_expected_args = array(); $this->_expected_args_at = array(); $test = &$this->_getCurrentTestCase(); $test->tell($this); } function disableExpectationNameChecks() { $this->_is_strict = false; } function &_getCurrentTestCase() { $context = &SimpleTest::getContext(); return $context->getTest(); } function _checkArgumentsIsArray($args, $task) { if (! is_array($args)) { trigger_error( "Cannot $task as \$args parameter is not an array", E_USER_ERROR); } } function _dieOnNoMethod($method, $task) { if ($this->_is_strict && ! method_exists($this, $method)) { trigger_error( "Cannot $task as no ${method}() in class " . get_class($this), E_USER_ERROR); } } function _replaceWildcards($args) { if ($args === false) { return false; } for ($i = 0; $i < count($args); $i++) { if ($args[$i] === $this->_wildcard) { $args[$i] = new AnythingExpectation(); } } return $args; } function _addCall($method, $args) { if (! isset($this->_call_counts[$method])) { $this->_call_counts[$method] = 0; } $this->_call_counts[$method]++; } function getCallCount($method) { $this->_dieOnNoMethod($method, "get call count"); $method = strtolower($method); if (! isset($this->_call_counts[$method])) { return 0; } return $this->_call_counts[$method]; } function setReturnValue($method, $value, $args = false) { $this->_dieOnNoMethod($method, "set return value"); $this->_actions->register($method, $args, new SimpleByValue($value)); } function setReturnValueAt($timing, $method, $value, $args = false) { $this->_dieOnNoMethod($method, "set return value sequence"); $this->_actions->registerAt($timing, $method, $args, new SimpleByValue($value)); } function setReturnReference($method, &$reference, $args = false) { $this->_dieOnNoMethod($method, "set return reference"); $this->_actions->register($method, $args, new SimpleByReference($reference)); } function setReturnReferenceAt($timing, $method, &$reference, $args = false) { $this->_dieOnNoMethod($method, "set return reference sequence"); $this->_actions->registerAt($timing, $method, $args, new SimpleByReference($reference)); } function expect($method, $args, $message = '%s') { $this->_dieOnNoMethod($method, 'set expected arguments'); $this->_checkArgumentsIsArray($args, 'set expected arguments'); $this->_expectations->expectArguments($method, $args, $message); $args = $this->_replaceWildcards($args); $message .= Mock::getExpectationLine(); $this->_expected_args[strtolower($method)] = new ParametersExpectation($args, $message); } function expectArguments($method, $args, $message = '%s') { return $this->expect($method, $args, $message); } function expectAt($timing, $method, $args, $message = '%s') { $this->_dieOnNoMethod($method, 'set expected arguments at time'); $this->_checkArgumentsIsArray($args, 'set expected arguments at time'); $args = $this->_replaceWildcards($args); if (! isset($this->_expected_args_at[$timing])) { $this->_expected_args_at[$timing] = array(); } $method = strtolower($method); $message .= Mock::getExpectationLine(); $this->_expected_args_at[$timing][$method] = new ParametersExpectation($args, $message); } function expectArgumentsAt($timing, $method, $args, $message = '%s') { return $this->expectAt($timing, $method, $args, $message); } function expectCallCount($method, $count, $message = '%s') { $this->_dieOnNoMethod($method, 'set expected call count'); $message .= Mock::getExpectationLine(); $this->_expected_counts[strtolower($method)] = new CallCountExpectation($method, $count, $message); } function expectMaximumCallCount($method, $count, $message = '%s') { $this->_dieOnNoMethod($method, 'set maximum call count'); $message .= Mock::getExpectationLine(); $this->_max_counts[strtolower($method)] = new MaximumCallCountExpectation($method, $count, $message); } function expectMinimumCallCount($method, $count, $message = '%s') { $this->_dieOnNoMethod($method, 'set minimum call count'); $message .= Mock::getExpectationLine(); $this->_expected_counts[strtolower($method)] = new MinimumCallCountExpectation($method, $count, $message); } function expectNever($method, $message = '%s') { $this->expectMaximumCallCount($method, 0, $message); } function expectOnce($method, $args = false, $message = '%s') { $this->expectCallCount($method, 1, $message); if ($args !== false) { $this->expect($method, $args, $message); } } function expectAtLeastOnce($method, $args = false, $message = '%s') { $this->expectMinimumCallCount($method, 1, $message); if ($args !== false) { $this->expect($method, $args, $message); } } function throwOn($method, $exception = false, $args = false) { $this->_dieOnNoMethod($method, "throw on"); $this->_actions->register($method, $args, new SimpleThrower($exception ? $exception : new Exception())); } function throwAt($timing, $method, $exception = false, $args = false) { $this->_dieOnNoMethod($method, "throw at"); $this->_actions->registerAt($timing, $method, $args, new SimpleThrower($exception ? $exception : new Exception())); } function errorOn($method, $error = 'A mock error', $args = false, $severity = E_USER_ERROR) { $this->_dieOnNoMethod($method, "error on"); $this->_actions->register($method, $args, new SimpleErrorThrower($error, $severity)); } function errorAt($timing, $method, $error = 'A mock error', $args = false, $severity = E_USER_ERROR) { $this->_dieOnNoMethod($method, "error at"); $this->_actions->registerAt($timing, $method, $args, new SimpleErrorThrower($error, $severity)); } function tally() { } function atTestEnd($test_method, &$test) { foreach ($this->_expected_counts as $method => $expectation) { $test->assert($expectation, $this->getCallCount($method)); } foreach ($this->_max_counts as $method => $expectation) { if ($expectation->test($this->getCallCount($method))) { $test->assert($expectation, $this->getCallCount($method)); } } } function &_invoke($method, $args) { $method = strtolower($method); $step = $this->getCallCount($method); $this->_addCall($method, $args); $this->_checkExpectations($method, $args, $step); $result = &$this->_emulateCall($method, $args, $step); return $result; } function &_emulateCall($method, $args, $step) { return $this->_actions->respond($step, $method, $args); } function _checkExpectations($method, $args, $timing) { $test = &$this->_getCurrentTestCase(); if (isset($this->_max_counts[$method])) { if (! $this->_max_counts[$method]->test($timing + 1)) { $test->assert($this->_max_counts[$method], $timing + 1); } } if (isset($this->_expected_args_at[$timing][$method])) { $test->assert( $this->_expected_args_at[$timing][$method], $args, "Mock method [$method] at [$timing] -> %s"); } elseif (isset($this->_expected_args[$method])) { $test->assert( $this->_expected_args[$method], $args, "Mock method [$method] -> %s"); } } } class Mock { function Mock() { trigger_error('Mock factory methods are static.'); } function generate($class, $mock_class = false, $methods = false) { $generator = new MockGenerator($class, $mock_class); return $generator->generateSubclass($methods); } function generatePartial($class, $mock_class, $methods) { $generator = new MockGenerator($class, $mock_class); return $generator->generatePartial($methods); } function getExpectationLine() { $trace = new SimpleStackTrace(array('expect')); return $trace->traceMethod(); } } class Stub extends Mock { } class MockGenerator { var $_class; var $_mock_class; var $_mock_base; var $_reflection; function MockGenerator($class, $mock_class) { $this->_class = $class; $this->_mock_class = $mock_class; if (! $this->_mock_class) { $this->_mock_class = 'Mock' . $this->_class; } $this->_mock_base = SimpleTest::getMockBaseClass(); $this->_reflection = new SimpleReflection($this->_class); } function generate($methods) { if (! $this->_reflection->classOrInterfaceExists()) { return false; } $mock_reflection = new SimpleReflection($this->_mock_class); if ($mock_reflection->classExistsSansAutoload()) { return false; } $code = $this->_createClassCode($methods ? $methods : array()); return eval("$code return \$code;"); } function generateSubclass($methods) { if (! $this->_reflection->classOrInterfaceExists()) { return false; } $mock_reflection = new SimpleReflection($this->_mock_class); if ($mock_reflection->classExistsSansAutoload()) { return false; } if ($this->_reflection->isInterface() || $this->_reflection->hasFinal()) { $code = $this->_createClassCode($methods ? $methods : array()); return eval("$code return \$code;"); } else { $code = $this->_createSubclassCode($methods ? $methods : array()); return eval("$code return \$code;"); } } function generatePartial($methods) { if (! $this->_reflection->classExists($this->_class)) { return false; } $mock_reflection = new SimpleReflection($this->_mock_class); if ($mock_reflection->classExistsSansAutoload()) { trigger_error('Partial mock class [' . $this->_mock_class . '] already exists'); return false; } $code = $this->_extendClassCode($methods); return eval("$code return \$code;"); } function _createClassCode($methods) { $implements = ''; $interfaces = $this->_reflection->getInterfaces(); if (function_exists('spl_classes')) { $interfaces = array_diff($interfaces, array('Traversable')); } if (count($interfaces) > 0) { $implements = 'implements ' . implode(', ', $interfaces); } $code = "class " . $this->_mock_class . " extends " . $this->_mock_base . " $implements {\n"; $code .= "    function " . $this->_mock_class . "() {\n"; $code .= "        \$this->" . $this->_mock_base . "();\n"; $code .= "    }\n"; if (in_array('__construct', $this->_reflection->getMethods())) { $code .= "    " . $this->_reflection->getSignature('__construct') . " {\n"; $code .= "        \$this->" . $this->_mock_base . "();\n"; $code .= "    }\n"; } $code .= $this->_createHandlerCode($methods); $code .= "}\n"; return $code; } function _createSubclassCode($methods) { $code = "class " . $this->_mock_class . " extends " . $this->_class . " {\n"; $code .= "    var \$_mock;\n"; $code .= $this->_addMethodList(array_merge($methods, $this->_reflection->getMethods())); $code .= "\n"; $code .= "    function " . $this->_mock_class . "() {\n"; $code .= "        \$this->_mock = &new " . $this->_mock_base . "();\n"; $code .= "        \$this->_mock->disableExpectationNameChecks();\n"; $code .= "    }\n"; $code .= $this->_chainMockReturns(); $code .= $this->_chainMockExpectations(); $code .= $this->_chainThrowMethods(); $code .= $this->_overrideMethods($this->_reflection->getMethods()); $code .= $this->_createNewMethodCode($methods); $code .= "}\n"; return $code; } function _extendClassCode($methods) { $code = "class " . $this->_mock_class . " extends " . $this->_class . " {\n"; $code .= "    var \$_mock;\n"; $code .= $this->_addMethodList($methods); $code .= "\n"; $code .= "    function " . $this->_mock_class . "() {\n"; $code .= "        \$this->_mock = &new " . $this->_mock_base . "();\n"; $code .= "        \$this->_mock->disableExpectationNameChecks();\n"; $code .= "    }\n"; $code .= $this->_chainMockReturns(); $code .= $this->_chainMockExpectations(); $code .= $this->_chainThrowMethods(); $code .= $this->_overrideMethods($methods); $code .= "}\n"; return $code; } function _createHandlerCode($methods) { $code = ''; $methods = array_merge($methods, $this->_reflection->getMethods()); foreach ($methods as $method) { if ($this->_isConstructor($method)) { continue; } $mock_reflection = new SimpleReflection($this->_mock_base); if (in_array($method, $mock_reflection->getMethods())) { continue; } $code .= "    " . $this->_reflection->getSignature($method) . " {\n"; $code .= "        \$args = func_get_args();\n"; $code .= "        \$result = &\$this->_invoke(\"$method\", \$args);\n"; $code .= "        return \$result;\n"; $code .= "    }\n"; } return $code; } function _createNewMethodCode($methods) { $code = ''; foreach ($methods as $method) { if ($this->_isConstructor($method)) { continue; } $mock_reflection = new SimpleReflection($this->_mock_base); if (in_array($method, $mock_reflection->getMethods())) { continue; } $code .= "    " . $this->_reflection->getSignature($method) . " {\n"; $code .= "        \$args = func_get_args();\n"; $code .= "        \$result = &\$this->_mock->_invoke(\"$method\", \$args);\n"; $code .= "        return \$result;\n"; $code .= "    }\n"; } return $code; } function _isConstructor($method) { return in_array( strtolower($method), array('__construct', '__destruct')); } function _addMethodList($methods) { return "    var \$_mocked_methods = array('" . implode("', '", array_map('strtolower', $methods)) . "');\n"; } function _bailOutIfNotMocked($alias) { $code = "        if (! in_array(strtolower($alias), \$this->_mocked_methods)) {\n"; $code .= "            trigger_error(\"Method [$alias] is not mocked\");\n"; $code .= "            \$null = null;\n"; $code .= "            return \$null;\n"; $code .= "        }\n"; return $code; } function _chainMockReturns() { $code = "    function setReturnValue(\$method, \$value, \$args = false) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->setReturnValue(\$method, \$value, \$args);\n"; $code .= "    }\n"; $code .= "    function setReturnValueAt(\$timing, \$method, \$value, \$args = false) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->setReturnValueAt(\$timing, \$method, \$value, \$args);\n"; $code .= "    }\n"; $code .= "    function setReturnReference(\$method, &\$ref, \$args = false) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->setReturnReference(\$method, \$ref, \$args);\n"; $code .= "    }\n"; $code .= "    function setReturnReferenceAt(\$timing, \$method, &\$ref, \$args = false) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->setReturnReferenceAt(\$timing, \$method, \$ref, \$args);\n"; $code .= "    }\n"; return $code; } function _chainMockExpectations() { $code = "    function expect(\$method, \$args = false, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expect(\$method, \$args, \$msg);\n"; $code .= "    }\n"; $code .= "    function expectArguments(\$method, \$args = false, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectArguments(\$method, \$args, \$msg);\n"; $code .= "    }\n"; $code .= "    function expectAt(\$timing, \$method, \$args = false, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectArgumentsAt(\$timing, \$method, \$args, \$msg);\n"; $code .= "    }\n"; $code .= "    function expectArgumentsAt(\$timing, \$method, \$args = false, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectArgumentsAt(\$timing, \$method, \$args, \$msg);\n"; $code .= "    }\n"; $code .= "    function expectCallCount(\$method, \$count) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectCallCount(\$method, \$count, \$msg = '%s');\n"; $code .= "    }\n"; $code .= "    function expectMaximumCallCount(\$method, \$count, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectMaximumCallCount(\$method, \$count, \$msg = '%s');\n"; $code .= "    }\n"; $code .= "    function expectMinimumCallCount(\$method, \$count, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectMinimumCallCount(\$method, \$count, \$msg = '%s');\n"; $code .= "    }\n"; $code .= "    function expectNever(\$method) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectNever(\$method);\n"; $code .= "    }\n"; $code .= "    function expectOnce(\$method, \$args = false, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectOnce(\$method, \$args, \$msg);\n"; $code .= "    }\n"; $code .= "    function expectAtLeastOnce(\$method, \$args = false, \$msg = '%s') {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->expectAtLeastOnce(\$method, \$args, \$msg);\n"; $code .= "    }\n"; $code .= "    function tally() {\n"; $code .= "    }\n"; return $code; } function _chainThrowMethods() { $code = "    function throwOn(\$method, \$exception = false, \$args = false) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->throwOn(\$method, \$exception, \$args);\n"; $code .= "    }\n"; $code .= "    function throwAt(\$timing, \$method, \$exception = false, \$args = false) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->throwAt(\$timing, \$method, \$exception, \$args);\n"; $code .= "    }\n"; $code .= "    function errorOn(\$method, \$error = 'A mock error', \$args = false, \$severity = E_USER_ERROR) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->errorOn(\$method, \$error, \$args, \$severity);\n"; $code .= "    }\n"; $code .= "    function errorAt(\$timing, \$method, \$error = 'A mock error', \$args = false, \$severity = E_USER_ERROR) {\n"; $code .= $this->_bailOutIfNotMocked("\$method"); $code .= "        \$this->_mock->errorAt(\$timing, \$method, \$error, \$args, \$severity);\n"; $code .= "    }\n"; return $code; } function _overrideMethods($methods) { $code = ""; foreach ($methods as $method) { if ($this->_isConstructor($method)) { continue; } $code .= "    " . $this->_reflection->getSignature($method) . " {\n"; $code .= "        \$args = func_get_args();\n"; $code .= "        \$result = &\$this->_mock->_invoke(\"$method\", \$args);\n"; $code .= "        return \$result;\n"; $code .= "    }\n"; } return $code; } }   class SimpleTagBuilder { function createTag($name, $attributes) { static $map = array( 'a' => 'SimpleAnchorTag', 'title' => 'SimpleTitleTag', 'base' => 'SimpleBaseTag', 'button' => 'SimpleButtonTag', 'textarea' => 'SimpleTextAreaTag', 'option' => 'SimpleOptionTag', 'label' => 'SimpleLabelTag', 'form' => 'SimpleFormTag', 'frame' => 'SimpleFrameTag'); $attributes = $this->_keysToLowerCase($attributes); if (array_key_exists($name, $map)) { $tag_class = $map[$name]; return new $tag_class($attributes); } elseif ($name == 'select') { return $this->_createSelectionTag($attributes); } elseif ($name == 'input') { return $this->_createInputTag($attributes); } return new SimpleTag($name, $attributes); } function _createSelectionTag($attributes) { if (isset($attributes['multiple'])) { return new MultipleSelectionTag($attributes); } return new SimpleSelectionTag($attributes); } function _createInputTag($attributes) { if (! isset($attributes['type'])) { return new SimpleTextTag($attributes); } $type = strtolower(trim($attributes['type'])); $map = array( 'submit' => 'SimpleSubmitTag', 'image' => 'SimpleImageSubmitTag', 'checkbox' => 'SimpleCheckboxTag', 'radio' => 'SimpleRadioButtonTag', 'text' => 'SimpleTextTag', 'hidden' => 'SimpleTextTag', 'password' => 'SimpleTextTag', 'file' => 'SimpleUploadTag'); if (array_key_exists($type, $map)) { $tag_class = $map[$type]; return new $tag_class($attributes); } return false; } function _keysToLowerCase($map) { $lower = array(); foreach ($map as $key => $value) { $lower[strtolower($key)] = $value; } return $lower; } } class SimplePageBuilder extends SimpleSaxListener { var $_tags; var $_page; var $_private_content_tag; function SimplePageBuilder() { $this->SimpleSaxListener(); } function free() { unset($this->_tags); unset($this->_page); unset($this->_private_content_tags); } function &parse($response) { $this->_tags = array(); $this->_page = &$this->_createPage($response); $parser = &$this->_createParser($this); $parser->parse($response->getContent()); $this->_page->acceptPageEnd(); return $this->_page; } function &_createPage($response) { $page = &new SimplePage($response); return $page; } function &_createParser(&$listener) { $parser = &new SimpleHtmlSaxParser($listener); return $parser; } function startElement($name, $attributes) { $factory = &new SimpleTagBuilder(); $tag = $factory->createTag($name, $attributes); if (! $tag) { return true; } if ($tag->getTagName() == 'label') { $this->_page->acceptLabelStart($tag); $this->_openTag($tag); return true; } if ($tag->getTagName() == 'form') { $this->_page->acceptFormStart($tag); return true; } if ($tag->getTagName() == 'frameset') { $this->_page->acceptFramesetStart($tag); return true; } if ($tag->getTagName() == 'frame') { $this->_page->acceptFrame($tag); return true; } if ($tag->isPrivateContent() && ! isset($this->_private_content_tag)) { $this->_private_content_tag = &$tag; } if ($tag->expectEndTag()) { $this->_openTag($tag); return true; } $this->_page->acceptTag($tag); return true; } function endElement($name) { if ($name == 'label') { $this->_page->acceptLabelEnd(); return true; } if ($name == 'form') { $this->_page->acceptFormEnd(); return true; } if ($name == 'frameset') { $this->_page->acceptFramesetEnd(); return true; } if ($this->_hasNamedTagOnOpenTagStack($name)) { $tag = array_pop($this->_tags[$name]); if ($tag->isPrivateContent() && $this->_private_content_tag->getTagName() == $name) { unset($this->_private_content_tag); } $this->_addContentTagToOpenTags($tag); $this->_page->acceptTag($tag); return true; } return true; } function _hasNamedTagOnOpenTagStack($name) { return isset($this->_tags[$name]) && (count($this->_tags[$name]) > 0); } function addContent($text) { if (isset($this->_private_content_tag)) { $this->_private_content_tag->addContent($text); } else { $this->_addContentToAllOpenTags($text); } return true; } function _addContentToAllOpenTags($text) { foreach (array_keys($this->_tags) as $name) { for ($i = 0, $count = count($this->_tags[$name]); $i < $count; $i++) { $this->_tags[$name][$i]->addContent($text); } } } function _addContentTagToOpenTags(&$tag) { if ($tag->getTagName() != 'option') { return; } foreach (array_keys($this->_tags) as $name) { for ($i = 0, $count = count($this->_tags[$name]); $i < $count; $i++) { $this->_tags[$name][$i]->addTag($tag); } } } function _openTag(&$tag) { $name = $tag->getTagName(); if (! in_array($name, array_keys($this->_tags))) { $this->_tags[$name] = array(); } $this->_tags[$name][] = &$tag; } } class SimplePage { var $_links; var $_title; var $_last_widget; var $_label; var $_left_over_labels; var $_open_forms; var $_complete_forms; var $_frameset; var $_frames; var $_frameset_nesting_level; var $_transport_error; var $_raw; var $_text; var $_sent; var $_headers; var $_method; var $_url; var $_base = false; var $_request_data; function SimplePage($response = false) { $this->_links = array(); $this->_title = false; $this->_left_over_labels = array(); $this->_open_forms = array(); $this->_complete_forms = array(); $this->_frameset = false; $this->_frames = array(); $this->_frameset_nesting_level = 0; $this->_text = false; if ($response) { $this->_extractResponse($response); } else { $this->_noResponse(); } } function _extractResponse($response) { $this->_transport_error = $response->getError(); $this->_raw = $response->getContent(); $this->_sent = $response->getSent(); $this->_headers = $response->getHeaders(); $this->_method = $response->getMethod(); $this->_url = $response->getUrl(); $this->_request_data = $response->getRequestData(); } function _noResponse() { $this->_transport_error = 'No page fetched yet'; $this->_raw = false; $this->_sent = false; $this->_headers = false; $this->_method = 'GET'; $this->_url = false; $this->_request_data = false; } function getRequest() { return $this->_sent; } function getRaw() { return $this->_raw; } function getText() { if (! $this->_text) { $this->_text = SimpleHtmlSaxParser::normalise($this->_raw); } return $this->_text; } function getHeaders() { if ($this->_headers) { return $this->_headers->getRaw(); } return false; } function getMethod() { return $this->_method; } function getUrl() { return $this->_url; } function getBaseUrl() { return $this->_base; } function getRequestData() { return $this->_request_data; } function getTransportError() { return $this->_transport_error; } function getMimeType() { if ($this->_headers) { return $this->_headers->getMimeType(); } return false; } function getResponseCode() { if ($this->_headers) { return $this->_headers->getResponseCode(); } return false; } function getAuthentication() { if ($this->_headers) { return $this->_headers->getAuthentication(); } return false; } function getRealm() { if ($this->_headers) { return $this->_headers->getRealm(); } return false; } function getFrameFocus() { return array(); } function setFrameFocusByIndex($choice) { return false; } function setFrameFocus($name) { return false; } function clearFrameFocus() { } function acceptTag(&$tag) { if ($tag->getTagName() == "a") { $this->_addLink($tag); } elseif ($tag->getTagName() == "base") { $this->_setBase($tag); } elseif ($tag->getTagName() == "title") { $this->_setTitle($tag); } elseif ($this->_isFormElement($tag->getTagName())) { for ($i = 0; $i < count($this->_open_forms); $i++) { $this->_open_forms[$i]->addWidget($tag); } $this->_last_widget = &$tag; } } function acceptLabelStart(&$tag) { $this->_label = &$tag; unset($this->_last_widget); } function acceptLabelEnd() { if (isset($this->_label)) { if (isset($this->_last_widget)) { $this->_last_widget->setLabel($this->_label->getText()); unset($this->_last_widget); } else { $this->_left_over_labels[] = SimpleTestCompatibility::copy($this->_label); } unset($this->_label); } } function _isFormElement($name) { return in_array($name, array('input', 'button', 'textarea', 'select')); } function acceptFormStart(&$tag) { $this->_open_forms[] = &new SimpleForm($tag, $this); } function acceptFormEnd() { if (count($this->_open_forms)) { $this->_complete_forms[] = array_pop($this->_open_forms); } } function acceptFramesetStart(&$tag) { if (! $this->_isLoadingFrames()) { $this->_frameset = &$tag; } $this->_frameset_nesting_level++; } function acceptFramesetEnd() { if ($this->_isLoadingFrames()) { $this->_frameset_nesting_level--; } } function acceptFrame(&$tag) { if ($this->_isLoadingFrames()) { if ($tag->getAttribute('src')) { $this->_frames[] = &$tag; } } } function _isLoadingFrames() { if (! $this->_frameset) { return false; } return ($this->_frameset_nesting_level > 0); } function _linkIsAbsolute($url) { $parsed = new SimpleUrl($url); return (boolean)($parsed->getScheme() && $parsed->getHost()); } function _addLink($tag) { $this->_links[] = $tag; } function acceptPageEnd() { while (count($this->_open_forms)) { $this->_complete_forms[] = array_pop($this->_open_forms); } foreach ($this->_left_over_labels as $label) { for ($i = 0, $count = count($this->_complete_forms); $i < $count; $i++) { $this->_complete_forms[$i]->attachLabelBySelector( new SimpleById($label->getFor()), $label->getText()); } } } function hasFrames() { return (boolean)$this->_frameset; } function getFrameset() { if (! $this->_frameset) { return false; } $urls = array(); for ($i = 0; $i < count($this->_frames); $i++) { $name = $this->_frames[$i]->getAttribute('name'); $url = new SimpleUrl($this->_frames[$i]->getAttribute('src')); $urls[$name ? $name : $i + 1] = $this->expandUrl($url); } return $urls; } function getFrames() { $url = $this->expandUrl($this->getUrl()); return $url->asString(); } function getUrls() { $all = array(); foreach ($this->_links as $link) { $url = $this->_getUrlFromLink($link); $all[] = $url->asString(); } return $all; } function getUrlsByLabel($label) { $matches = array(); foreach ($this->_links as $link) { if ($link->getText() == $label) { $matches[] = $this->_getUrlFromLink($link); } } return $matches; } function getUrlById($id) { foreach ($this->_links as $link) { if ($link->getAttribute('id') === (string)$id) { return $this->_getUrlFromLink($link); } } return false; } function _getUrlFromLink($link) { $url = $this->expandUrl($link->getHref()); if ($link->getAttribute('target')) { $url->setTarget($link->getAttribute('target')); } return $url; } function expandUrl($url) { if (! is_object($url)) { $url = new SimpleUrl($url); } $location = $this->getBaseUrl() ? $this->getBaseUrl() : new SimpleUrl(); return $url->makeAbsolute($location->makeAbsolute($this->getUrl())); } function _setBase(&$tag) { $url = $tag->getAttribute('href'); $this->_base = new SimpleUrl($url); } function _setTitle(&$tag) { $this->_title = &$tag; } function getTitle() { if ($this->_title) { return $this->_title->getText(); } return false; } function &getFormBySubmit($selector) { for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->hasSubmit($selector)) { return $this->_complete_forms[$i]; } } $null = null; return $null; } function &getFormByImage($selector) { for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->hasImage($selector)) { return $this->_complete_forms[$i]; } } $null = null; return $null; } function &getFormById($id) { for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->getId() == $id) { return $this->_complete_forms[$i]; } } $null = null; return $null; } function setField($selector, $value, $position=false) { $is_set = false; for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->setField($selector, $value, $position)) { $is_set = true; } } return $is_set; } function getField($selector) { for ($i = 0; $i < count($this->_complete_forms); $i++) { $value = $this->_complete_forms[$i]->getValue($selector); if (isset($value)) { return $value; } } return null; } }   foreach (array('LEXER_ENTER', 'LEXER_MATCHED', 'LEXER_UNMATCHED', 'LEXER_EXIT', 'LEXER_SPECIAL') as $i => $constant) { if (! defined($constant)) { define($constant, $i + 1); } } class ParallelRegex { var $_patterns; var $_labels; var $_regex; var $_case; function ParallelRegex($case) { $this->_case = $case; $this->_patterns = array(); $this->_labels = array(); $this->_regex = null; } function addPattern($pattern, $label = true) { $count = count($this->_patterns); $this->_patterns[$count] = $pattern; $this->_labels[$count] = $label; $this->_regex = null; } function match($subject, &$match) { if (count($this->_patterns) == 0) { return false; } if (! preg_match($this->_getCompoundedRegex(), $subject, $matches)) { $match = ''; return false; } $match = $matches[0]; for ($i = 1; $i < count($matches); $i++) { if ($matches[$i]) { return $this->_labels[$i - 1]; } } return true; } function _getCompoundedRegex() { if ($this->_regex == null) { for ($i = 0, $count = count($this->_patterns); $i < $count; $i++) { $this->_patterns[$i] = '(' . str_replace( array('/', '(', ')'), array('\/', '\(', '\)'), $this->_patterns[$i]) . ')'; } $this->_regex = "/" . implode("|", $this->_patterns) . "/" . $this->_getPerlMatchingFlags(); } return $this->_regex; } function _getPerlMatchingFlags() { return ($this->_case ? "msS" : "msSi"); } } class SimpleStateStack { var $_stack; function SimpleStateStack($start) { $this->_stack = array($start); } function getCurrent() { return $this->_stack[count($this->_stack) - 1]; } function enter($state) { array_push($this->_stack, $state); } function leave() { if (count($this->_stack) == 1) { return false; } array_pop($this->_stack); return true; } } class SimpleLexer { var $_regexes; var $_parser; var $_mode; var $_mode_handlers; var $_case; function SimpleLexer(&$parser, $start = "accept", $case = false) { $this->_case = $case; $this->_regexes = array(); $this->_parser = &$parser; $this->_mode = &new SimpleStateStack($start); $this->_mode_handlers = array($start => $start); } function addPattern($pattern, $mode = "accept") { if (! isset($this->_regexes[$mode])) { $this->_regexes[$mode] = new ParallelRegex($this->_case); } $this->_regexes[$mode]->addPattern($pattern); if (! isset($this->_mode_handlers[$mode])) { $this->_mode_handlers[$mode] = $mode; } } function addEntryPattern($pattern, $mode, $new_mode) { if (! isset($this->_regexes[$mode])) { $this->_regexes[$mode] = new ParallelRegex($this->_case); } $this->_regexes[$mode]->addPattern($pattern, $new_mode); if (! isset($this->_mode_handlers[$new_mode])) { $this->_mode_handlers[$new_mode] = $new_mode; } } function addExitPattern($pattern, $mode) { if (! isset($this->_regexes[$mode])) { $this->_regexes[$mode] = new ParallelRegex($this->_case); } $this->_regexes[$mode]->addPattern($pattern, "__exit"); if (! isset($this->_mode_handlers[$mode])) { $this->_mode_handlers[$mode] = $mode; } } function addSpecialPattern($pattern, $mode, $special) { if (! isset($this->_regexes[$mode])) { $this->_regexes[$mode] = new ParallelRegex($this->_case); } $this->_regexes[$mode]->addPattern($pattern, "_$special"); if (! isset($this->_mode_handlers[$special])) { $this->_mode_handlers[$special] = $special; } } function mapHandler($mode, $handler) { $this->_mode_handlers[$mode] = $handler; } function parse($raw) { if (! isset($this->_parser)) { return false; } $length = strlen($raw); while (is_array($parsed = $this->_reduce($raw))) { list($raw, $unmatched, $matched, $mode) = $parsed; if (! $this->_dispatchTokens($unmatched, $matched, $mode)) { return false; } if ($raw === '') { return true; } if (strlen($raw) == $length) { return false; } $length = strlen($raw); } if (! $parsed) { return false; } return $this->_invokeParser($raw, LEXER_UNMATCHED); } function _dispatchTokens($unmatched, $matched, $mode = false) { if (! $this->_invokeParser($unmatched, LEXER_UNMATCHED)) { return false; } if (is_bool($mode)) { return $this->_invokeParser($matched, LEXER_MATCHED); } if ($this->_isModeEnd($mode)) { if (! $this->_invokeParser($matched, LEXER_EXIT)) { return false; } return $this->_mode->leave(); } if ($this->_isSpecialMode($mode)) { $this->_mode->enter($this->_decodeSpecial($mode)); if (! $this->_invokeParser($matched, LEXER_SPECIAL)) { return false; } return $this->_mode->leave(); } $this->_mode->enter($mode); return $this->_invokeParser($matched, LEXER_ENTER); } function _isModeEnd($mode) { return ($mode === "__exit"); } function _isSpecialMode($mode) { return (strncmp($mode, "_", 1) == 0); } function _decodeSpecial($mode) { return substr($mode, 1); } function _invokeParser($content, $is_match) { if (($content === '') || ($content === false)) { return true; } $handler = $this->_mode_handlers[$this->_mode->getCurrent()]; return $this->_parser->$handler($content, $is_match); } function _reduce($raw) { if ($action = $this->_regexes[$this->_mode->getCurrent()]->match($raw, $match)) { $unparsed_character_count = strpos($raw, $match); $unparsed = substr($raw, 0, $unparsed_character_count); $raw = substr($raw, $unparsed_character_count + strlen($match)); return array($raw, $unparsed, $match, $action); } return true; } } class SimpleHtmlLexer extends SimpleLexer { function SimpleHtmlLexer(&$parser) { $this->SimpleLexer($parser, 'text'); $this->mapHandler('text', 'acceptTextToken'); $this->_addSkipping(); foreach ($this->_getParsedTags() as $tag) { $this->_addTag($tag); } $this->_addInTagTokens(); } function _getParsedTags() { return array('a', 'base', 'title', 'form', 'input', 'button', 'textarea', 'select', 'option', 'frameset', 'frame', 'label'); } function _addSkipping() { $this->mapHandler('css', 'ignore'); $this->addEntryPattern('<style', 'text', 'css'); $this->addExitPattern('</style>', 'css'); $this->mapHandler('js', 'ignore'); $this->addEntryPattern('<script', 'text', 'js'); $this->addExitPattern('</script>', 'js'); $this->mapHandler('comment', 'ignore'); $this->addEntryPattern('<!--', 'text', 'comment'); $this->addExitPattern('-->', 'comment'); } function _addTag($tag) { $this->addSpecialPattern("</$tag>", 'text', 'acceptEndToken'); $this->addEntryPattern("<$tag", 'text', 'tag'); } function _addInTagTokens() { $this->mapHandler('tag', 'acceptStartToken'); $this->addSpecialPattern('\s+', 'tag', 'ignore'); $this->_addAttributeTokens(); $this->addExitPattern('/>', 'tag'); $this->addExitPattern('>', 'tag'); } function _addAttributeTokens() { $this->mapHandler('dq_attribute', 'acceptAttributeToken'); $this->addEntryPattern('=\s*"', 'tag', 'dq_attribute'); $this->addPattern("\\\\\"", 'dq_attribute'); $this->addExitPattern('"', 'dq_attribute'); $this->mapHandler('sq_attribute', 'acceptAttributeToken'); $this->addEntryPattern("=\s*'", 'tag', 'sq_attribute'); $this->addPattern("\\\\'", 'sq_attribute'); $this->addExitPattern("'", 'sq_attribute'); $this->mapHandler('uq_attribute', 'acceptAttributeToken'); $this->addSpecialPattern('=\s*[^>\s]*', 'tag', 'uq_attribute'); } } class SimpleHtmlSaxParser { var $_lexer; var $_listener; var $_tag; var $_attributes; var $_current_attribute; function SimpleHtmlSaxParser(&$listener) { $this->_listener = &$listener; $this->_lexer = &$this->createLexer($this); $this->_tag = ''; $this->_attributes = array(); $this->_current_attribute = ''; } function parse($raw) { return $this->_lexer->parse($raw); } function &createLexer(&$parser) { $lexer = &new SimpleHtmlLexer($parser); return $lexer; } function acceptStartToken($token, $event) { if ($event == LEXER_ENTER) { $this->_tag = strtolower(substr($token, 1)); return true; } if ($event == LEXER_EXIT) { $success = $this->_listener->startElement( $this->_tag, $this->_attributes); $this->_tag = ''; $this->_attributes = array(); return $success; } if ($token != '=') { $this->_current_attribute = strtolower(SimpleHtmlSaxParser::decodeHtml($token)); $this->_attributes[$this->_current_attribute] = ''; } return true; } function acceptEndToken($token, $event) { if (! preg_match('/<\/(.*)>/', $token, $matches)) { return false; } return $this->_listener->endElement(strtolower($matches[1])); } function acceptAttributeToken($token, $event) { if ($this->_current_attribute) { if ($event == LEXER_UNMATCHED) { $this->_attributes[$this->_current_attribute] .= SimpleHtmlSaxParser::decodeHtml($token); } if ($event == LEXER_SPECIAL) { $this->_attributes[$this->_current_attribute] .= preg_replace('/^=\s*/' , '', SimpleHtmlSaxParser::decodeHtml($token)); } } return true; } function acceptEntityToken($token, $event) { } function acceptTextToken($token, $event) { return $this->_listener->addContent($token); } function ignore($token, $event) { return true; } function decodeHtml($html) { return html_entity_decode($html, ENT_QUOTES); } function normalise($html) { $text = preg_replace('|<!--.*?-->|', '', $html); $text = preg_replace('|<script[^>]*>.*?</script>|', '', $text); $text = preg_replace('|<img[^>]*alt\s*=\s*"([^"]*)"[^>]*>|', ' \1 ', $text); $text = preg_replace('|<img[^>]*alt\s*=\s*\'([^\']*)\'[^>]*>|', ' \1 ', $text); $text = preg_replace('|<img[^>]*alt\s*=\s*([a-zA-Z_]+)[^>]*>|', ' \1 ', $text); $text = preg_replace('|<[^>]*>|', '', $text); $text = SimpleHtmlSaxParser::decodeHtml($text); $text = preg_replace('|\s+|', ' ', $text); return trim(trim($text), "\xA0"); } } class SimpleSaxListener { function SimpleSaxListener() { } function startElement($name, $attributes) { } function endElement($name) { } function addContent($text) { } }   class SimpleReflection { var $_interface; function SimpleReflection($interface) { $this->_interface = $interface; } function classExists() { if (! class_exists($this->_interface)) { return false; } $reflection = new ReflectionClass($this->_interface); return ! $reflection->isInterface(); } function classExistsSansAutoload() { return class_exists($this->_interface, false); } function classOrInterfaceExists() { return $this->_classOrInterfaceExistsWithAutoload($this->_interface, true); } function classOrInterfaceExistsSansAutoload() { return $this->_classOrInterfaceExistsWithAutoload($this->_interface, false); } function _classOrInterfaceExistsWithAutoload($interface, $autoload) { if (function_exists('interface_exists')) { if (interface_exists($this->_interface, $autoload)) { return true; } } return class_exists($this->_interface, $autoload); } function getMethods() { return array_unique(get_class_methods($this->_interface)); } function getInterfaces() { $reflection = new ReflectionClass($this->_interface); if ($reflection->isInterface()) { return array($this->_interface); } return $this->_onlyParents($reflection->getInterfaces()); } function getInterfaceMethods() { $methods = array(); foreach ($this->getInterfaces() as $interface) { $methods = array_merge($methods, get_class_methods($interface)); } return array_unique($methods); } function _isInterfaceMethod($method) { return in_array($method, $this->getInterfaceMethods()); } function getParent() { $reflection = new ReflectionClass($this->_interface); $parent = $reflection->getParentClass(); if ($parent) { return $parent->getName(); } return false; } function isAbstract() { $reflection = new ReflectionClass($this->_interface); return $reflection->isAbstract(); } function isInterface() { $reflection = new ReflectionClass($this->_interface); return $reflection->isInterface(); } function hasFinal() { $reflection = new ReflectionClass($this->_interface); foreach ($reflection->getMethods() as $method) { if ($method->isFinal()) { return true; } } return false; } function _onlyParents($interfaces) { $parents = array(); $blacklist = array(); foreach ($interfaces as $interface) { foreach($interfaces as $possible_parent) { if ($interface->getName() == $possible_parent->getName()) { continue; } if ($interface->isSubClassOf($possible_parent)) { $blacklist[$possible_parent->getName()] = true; } } if (!isset($blacklist[$interface->getName()])) { $parents[] = $interface->getName(); } } return $parents; } function _isAbstractMethod($name) { $interface = new ReflectionClass($this->_interface); if (! $interface->hasMethod($name)) { return false; } return $interface->getMethod($name)->isAbstract(); } function _isConstructor($name) { return ($name == '__construct') || ($name == $this->_interface); } function _isAbstractMethodInParents($name) { $interface = new ReflectionClass($this->_interface); $parent = $interface->getParentClass(); while($parent) { if (! $parent->hasMethod($name)) { return false; } if ($parent->getMethod($name)->isAbstract()) { return true; } $parent = $parent->getParentClass(); } return false; } function _isStaticMethod($name) { $interface = new ReflectionClass($this->_interface); if (! $interface->hasMethod($name)) { return false; } return $interface->getMethod($name)->isStatic(); } function getSignature($name) { if ($name == '__set') { return 'function __set($key, $value)'; } if ($name == '__call') { return 'function __call($method, $arguments)'; } if (version_compare(phpversion(), '5.1.0', '>=')) { if (in_array($name, array('__get', '__isset', $name == '__unset'))) { return "function {$name}(\$key)"; } } if ($name == '__toString') { return "function $name()"; } if ($this->_isInterfaceMethod($name) || $this->_isAbstractMethod($name) || $this->_isAbstractMethodInParents($name) || $this->_isStaticMethod($name)) { return $this->_getFullSignature($name); } return "function $name()"; } function _getFullSignature($name) { $interface = new ReflectionClass($this->_interface); $method = $interface->getMethod($name); $reference = $method->returnsReference() ? '&' : ''; $static = $method->isStatic() ? 'static ' : ''; return "{$static}function $reference$name(" . implode(', ', $this->_getParameterSignatures($method)) . ")"; } function _getParameterSignatures($method) { $signatures = array(); foreach ($method->getParameters() as $parameter) { $signature = ''; $type = $parameter->getClass(); if (is_null($type) && version_compare(phpversion(), '5.1.0', '>=') && $parameter->isArray()) { $signature .= 'array '; } elseif (!is_null($type)) { $signature .= $type->getName() . ' '; } if ($parameter->isPassedByReference()) { $signature .= '&'; } $signature .= '$' . $this->_suppressSpurious($parameter->getName()); if ($this->_isOptional($parameter)) { $signature .= ' = null'; } $signatures[] = $signature; } return $signatures; } function _suppressSpurious($name) { return str_replace(array('[', ']', ' '), '', $name); } function _isOptional($parameter) { if (method_exists($parameter, 'isOptional')) { return $parameter->isOptional(); } return false; } }   class RemoteTestCase { var $_url; var $_dry_url; var $_size; function RemoteTestCase($url, $dry_url = false) { $this->_url = $url; $this->_dry_url = $dry_url ? $dry_url : $url; $this->_size = false; } function getLabel() { return $this->_url; } function run(&$reporter) { $browser = &$this->_createBrowser(); $xml = $browser->get($this->_url); if (! $xml) { trigger_error('Cannot read remote test URL [' . $this->_url . ']'); return false; } $parser = &$this->_createParser($reporter); if (! $parser->parse($xml)) { trigger_error('Cannot parse incoming XML from [' . $this->_url . ']'); return false; } return true; } function &_createBrowser() { $browser = &new SimpleBrowser(); return $browser; } function &_createParser(&$reporter) { $parser = &new SimpleTestXmlParser($reporter); return $parser; } function getSize() { if ($this->_size === false) { $browser = &$this->_createBrowser(); $xml = $browser->get($this->_dry_url); if (! $xml) { trigger_error('Cannot read remote test URL [' . $this->_dry_url . ']'); return false; } $reporter = &new SimpleReporter(); $parser = &$this->_createParser($reporter); if (! $parser->parse($xml)) { trigger_error('Cannot parse incoming XML from [' . $this->_dry_url . ']'); return false; } $this->_size = $reporter->getTestCaseCount(); } return $this->_size; } }   class HtmlReporter extends SimpleReporter { var $_character_set; function HtmlReporter($character_set = 'ISO-8859-1') { $this->SimpleReporter(); $this->_character_set = $character_set; } function paintHeader($test_name) { $this->sendNoCacheHeaders(); print "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">"; print "<html>\n<head>\n<title>$test_name</title>\n"; print "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=" . $this->_character_set . "\">\n"; print "<style type=\"text/css\">\n"; print $this->_getCss() . "\n"; print "</style>\n"; print "</head>\n<body>\n"; print "<h1>$test_name</h1>\n"; flush(); } function sendNoCacheHeaders() { if (! headers_sent()) { header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); header("Cache-Control: no-store, no-cache, must-revalidate"); header("Cache-Control: post-check=0, pre-check=0", false); header("Pragma: no-cache"); } } function _getCss() { return ".fail { background-color: inherit; color: red; }" . ".pass { background-color: inherit; color: green; }" . " pre { background-color: lightgray; color: inherit; }"; } function paintFooter($test_name) { $colour = ($this->getFailCount() + $this->getExceptionCount() > 0 ? "red" : "green"); print "<div style=\""; print "padding: 8px; margin-top: 1em; background-color: $colour; color: white;"; print "\">"; print $this->getTestCaseProgress() . "/" . $this->getTestCaseCount(); print " test cases complete:\n"; print "<strong>" . $this->getPassCount() . "</strong> passes, "; print "<strong>" . $this->getFailCount() . "</strong> fails and "; print "<strong>" . $this->getExceptionCount() . "</strong> exceptions."; print "</div>\n"; print "</body>\n</html>\n"; } function paintFail($message) { parent::paintFail($message); print "<span class=\"fail\">Fail</span>: "; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print implode(" -&gt; ", $breadcrumb); print " -&gt; " . $this->_htmlEntities($message) . "<br />\n"; } function paintError($message) { parent::paintError($message); print "<span class=\"fail\">Exception</span>: "; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print implode(" -&gt; ", $breadcrumb); print " -&gt; <strong>" . $this->_htmlEntities($message) . "</strong><br />\n"; } function paintException($exception) { parent::paintException($exception); print "<span class=\"fail\">Exception</span>: "; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print implode(" -&gt; ", $breadcrumb); $message = 'Unexpected exception of type [' . get_class($exception) . '] with message ['. $exception->getMessage() . '] in ['. $exception->getFile() . ' line ' . $exception->getLine() . ']'; print " -&gt; <strong>" . $this->_htmlEntities($message) . "</strong><br />\n"; } function paintSkip($message) { parent::paintSkip($message); print "<span class=\"pass\">Skipped</span>: "; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print implode(" -&gt; ", $breadcrumb); print " -&gt; " . $this->_htmlEntities($message) . "<br />\n"; } function paintFormattedMessage($message) { print '<pre>' . $this->_htmlEntities($message) . '</pre>'; } function _htmlEntities($message) { return htmlentities($message, ENT_COMPAT, $this->_character_set); } } class TextReporter extends SimpleReporter { function TextReporter() { $this->SimpleReporter(); } function paintHeader($test_name) { if (! SimpleReporter::inCli()) { header('Content-type: text/plain'); } print "$test_name\n"; flush(); } function paintFooter($test_name) { if ($this->getFailCount() + $this->getExceptionCount() == 0) { print "OK\n"; } else { print "FAILURES!!!\n"; } print "Test cases run: " . $this->getTestCaseProgress() . "/" . $this->getTestCaseCount() . ", Passes: " . $this->getPassCount() . ", Failures: " . $this->getFailCount() . ", Exceptions: " . $this->getExceptionCount() . "\n"; } function paintFail($message) { parent::paintFail($message); print $this->getFailCount() . ") $message\n"; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print "\tin " . implode("\n\tin ", array_reverse($breadcrumb)); print "\n"; } function paintError($message) { parent::paintError($message); print "Exception " . $this->getExceptionCount() . "!\n$message\n"; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print "\tin " . implode("\n\tin ", array_reverse($breadcrumb)); print "\n"; } function paintException($exception) { parent::paintException($exception); $message = 'Unexpected exception of type [' . get_class($exception) . '] with message ['. $exception->getMessage() . '] in ['. $exception->getFile() . ' line ' . $exception->getLine() . ']'; print "Exception " . $this->getExceptionCount() . "!\n$message\n"; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print "\tin " . implode("\n\tin ", array_reverse($breadcrumb)); print "\n"; } function paintSkip($message) { parent::paintSkip($message); print "Skip: $message\n"; } function paintFormattedMessage($message) { print "$message\n"; flush(); } } class SelectiveReporter extends SimpleReporterDecorator { var $_just_this_case = false; var $_just_this_test = false; var $_on; function SelectiveReporter(&$reporter, $just_this_case = false, $just_this_test = false) { if (isset($just_this_case) && $just_this_case) { $this->_just_this_case = strtolower($just_this_case); $this->_off(); } else { $this->_on(); } if (isset($just_this_test) && $just_this_test) { $this->_just_this_test = strtolower($just_this_test); } $this->SimpleReporterDecorator($reporter); } function _matchesTestCase($test_case) { return $this->_just_this_case == strtolower($test_case); } function _shouldRunTest($test_case, $method) { if ($this->_isOn() || $this->_matchesTestCase($test_case)) { if ($this->_just_this_test) { return $this->_just_this_test == strtolower($method); } else { return true; } } return false; } function _on() { $this->_on = true; } function _off() { $this->_on = false; } function _isOn() { return $this->_on; } function shouldInvoke($test_case, $method) { if ($this->_shouldRunTest($test_case, $method)) { return $this->_reporter->shouldInvoke($test_case, $method); } return false; } function paintGroupStart($test_case, $size) { if ($this->_just_this_case && $this->_matchesTestCase($test_case)) { $this->_on(); } $this->_reporter->paintGroupStart($test_case, $size); } function paintGroupEnd($test_case) { $this->_reporter->paintGroupEnd($test_case); if ($this->_just_this_case && $this->_matchesTestCase($test_case)) { $this->_off(); } } } class NoSkipsReporter extends SimpleReporterDecorator { function paintSkip($message) { } }   class SimpleScorer { var $_passes; var $_fails; var $_exceptions; var $_is_dry_run; function SimpleScorer() { $this->_passes = 0; $this->_fails = 0; $this->_exceptions = 0; $this->_is_dry_run = false; } function makeDry($is_dry = true) { $this->_is_dry_run = $is_dry; } function shouldInvoke($test_case_name, $method) { return ! $this->_is_dry_run; } function &createInvoker(&$invoker) { return $invoker; } function getStatus() { if ($this->_exceptions + $this->_fails > 0) { return false; } return true; } function paintGroupStart($test_name, $size) { } function paintGroupEnd($test_name) { } function paintCaseStart($test_name) { } function paintCaseEnd($test_name) { } function paintMethodStart($test_name) { } function paintMethodEnd($test_name) { } function paintPass($message) { $this->_passes++; } function paintFail($message) { $this->_fails++; } function paintError($message) { $this->_exceptions++; } function paintException($exception) { $this->_exceptions++; } function paintSkip($message) { } function getPassCount() { return $this->_passes; } function getFailCount() { return $this->_fails; } function getExceptionCount() { return $this->_exceptions; } function paintMessage($message) { } function paintFormattedMessage($message) { } function paintSignal($type, $payload) { } } class SimpleReporter extends SimpleScorer { var $_test_stack; var $_size; var $_progress; function SimpleReporter() { $this->SimpleScorer(); $this->_test_stack = array(); $this->_size = null; $this->_progress = 0; } function getDumper() { return new SimpleDumper(); } function paintGroupStart($test_name, $size) { if (! isset($this->_size)) { $this->_size = $size; } if (count($this->_test_stack) == 0) { $this->paintHeader($test_name); } $this->_test_stack[] = $test_name; } function paintGroupEnd($test_name) { array_pop($this->_test_stack); if (count($this->_test_stack) == 0) { $this->paintFooter($test_name); } } function paintCaseStart($test_name) { if (! isset($this->_size)) { $this->_size = 1; } if (count($this->_test_stack) == 0) { $this->paintHeader($test_name); } $this->_test_stack[] = $test_name; } function paintCaseEnd($test_name) { $this->_progress++; array_pop($this->_test_stack); if (count($this->_test_stack) == 0) { $this->paintFooter($test_name); } } function paintMethodStart($test_name) { $this->_test_stack[] = $test_name; } function paintMethodEnd($test_name) { array_pop($this->_test_stack); } function paintHeader($test_name) { } function paintFooter($test_name) { } function getTestList() { return $this->_test_stack; } function getTestCaseCount() { return $this->_size; } function getTestCaseProgress() { return $this->_progress; } function inCli() { return php_sapi_name() == 'cli'; } } class SimpleReporterDecorator { var $_reporter; function SimpleReporterDecorator(&$reporter) { $this->_reporter = &$reporter; } function makeDry($is_dry = true) { $this->_reporter->makeDry($is_dry); } function getStatus() { return $this->_reporter->getStatus(); } function shouldInvoke($test_case_name, $method) { return $this->_reporter->shouldInvoke($test_case_name, $method); } function &createInvoker(&$invoker) { return $this->_reporter->createInvoker($invoker); } function getDumper() { return $this->_reporter->getDumper(); } function paintGroupStart($test_name, $size) { $this->_reporter->paintGroupStart($test_name, $size); } function paintGroupEnd($test_name) { $this->_reporter->paintGroupEnd($test_name); } function paintCaseStart($test_name) { $this->_reporter->paintCaseStart($test_name); } function paintCaseEnd($test_name) { $this->_reporter->paintCaseEnd($test_name); } function paintMethodStart($test_name) { $this->_reporter->paintMethodStart($test_name); } function paintMethodEnd($test_name) { $this->_reporter->paintMethodEnd($test_name); } function paintPass($message) { $this->_reporter->paintPass($message); } function paintFail($message) { $this->_reporter->paintFail($message); } function paintError($message) { $this->_reporter->paintError($message); } function paintException($exception) { $this->_reporter->paintException($exception); } function paintSkip($message) { $this->_reporter->paintSkip($message); } function paintMessage($message) { $this->_reporter->paintMessage($message); } function paintFormattedMessage($message) { $this->_reporter->paintFormattedMessage($message); } function paintSignal($type, &$payload) { $this->_reporter->paintSignal($type, $payload); } } class MultipleReporter { var $_reporters = array(); function attachReporter(&$reporter) { $this->_reporters[] = &$reporter; } function makeDry($is_dry = true) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->makeDry($is_dry); } } function getStatus() { for ($i = 0; $i < count($this->_reporters); $i++) { if (! $this->_reporters[$i]->getStatus()) { return false; } } return true; } function shouldInvoke($test_case_name, $method) { for ($i = 0; $i < count($this->_reporters); $i++) { if (! $this->_reporters[$i]->shouldInvoke($test_case_name, $method)) { return false; } } return true; } function &createInvoker(&$invoker) { for ($i = 0; $i < count($this->_reporters); $i++) { $invoker = &$this->_reporters[$i]->createInvoker($invoker); } return $invoker; } function getDumper() { return new SimpleDumper(); } function paintGroupStart($test_name, $size) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintGroupStart($test_name, $size); } } function paintGroupEnd($test_name) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintGroupEnd($test_name); } } function paintCaseStart($test_name) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintCaseStart($test_name); } } function paintCaseEnd($test_name) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintCaseEnd($test_name); } } function paintMethodStart($test_name) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintMethodStart($test_name); } } function paintMethodEnd($test_name) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintMethodEnd($test_name); } } function paintPass($message) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintPass($message); } } function paintFail($message) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintFail($message); } } function paintError($message) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintError($message); } } function paintException($exception) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintException($exception); } } function paintSkip($message) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintSkip($message); } } function paintMessage($message) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintMessage($message); } } function paintFormattedMessage($message) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintFormattedMessage($message); } } function paintSignal($type, &$payload) { for ($i = 0; $i < count($this->_reporters); $i++) { $this->_reporters[$i]->paintSignal($type, $payload); } } }   class SimpleByName { var $_name; function SimpleByName($name) { $this->_name = $name; } function getName() { return $this->_name; } function isMatch($widget) { return ($widget->getName() == $this->_name); } } class SimpleByLabel { var $_label; function SimpleByLabel($label) { $this->_label = $label; } function isMatch($widget) { if (! method_exists($widget, 'isLabel')) { return false; } return $widget->isLabel($this->_label); } } class SimpleById { var $_id; function SimpleById($id) { $this->_id = $id; } function isMatch($widget) { return $widget->isId($this->_id); } } class SimpleByLabelOrName { var $_label; function SimpleByLabelOrName($label) { $this->_label = $label; } function isMatch($widget) { if (method_exists($widget, 'isLabel')) { if ($widget->isLabel($this->_label)) { return true; } } return ($widget->getName() == $this->_label); } }   class SimpleShell { var $_output; function SimpleShell() { $this->_output = false; } function execute($command) { $this->_output = false; exec($command, $this->_output, $ret); return $ret; } function getOutput() { return implode("\n", $this->_output); } function getOutputAsList() { return $this->_output; } } class ShellTestCase extends SimpleTestCase { var $_current_shell; var $_last_status; var $_last_command; function ShellTestCase($label = false) { $this->SimpleTestCase($label); $this->_current_shell = &$this->_createShell(); $this->_last_status = false; $this->_last_command = ''; } function execute($command) { $shell = &$this->_getShell(); $this->_last_status = $shell->execute($command); $this->_last_command = $command; return ($this->_last_status === 0); } function dumpOutput() { $this->dump($this->getOutput()); } function getOutput() { $shell = &$this->_getShell(); return $shell->getOutput(); } function getOutputAsList() { $shell = &$this->_getShell(); return $shell->getOutputAsList(); } function assertTrue($result, $message = false) { return $this->assert(new TrueExpectation(), $result, $message); } function assertFalse($result, $message = '%s') { return $this->assert(new FalseExpectation(), $result, $message); } function assertEqual($first, $second, $message = "%s") { return $this->assert( new EqualExpectation($first), $second, $message); } function assertNotEqual($first, $second, $message = "%s") { return $this->assert( new NotEqualExpectation($first), $second, $message); } function assertExitCode($status, $message = "%s") { $message = sprintf($message, "Expected status code of [$status] from [" . $this->_last_command . "], but got [" . $this->_last_status . "]"); return $this->assertTrue($status === $this->_last_status, $message); } function assertOutput($expected, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new EqualExpectation($expected), $shell->getOutput(), $message); } function assertOutputPattern($pattern, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new PatternExpectation($pattern), $shell->getOutput(), $message); } function assertNoOutputPattern($pattern, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new NoPatternExpectation($pattern), $shell->getOutput(), $message); } function assertFileExists($path, $message = "%s") { $message = sprintf($message, "File [$path] should exist"); return $this->assertTrue(file_exists($path), $message); } function assertFileNotExists($path, $message = "%s") { $message = sprintf($message, "File [$path] should not exist"); return $this->assertFalse(file_exists($path), $message); } function assertFilePattern($pattern, $path, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new PatternExpectation($pattern), implode('', file($path)), $message); } function assertNoFilePattern($pattern, $path, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new NoPatternExpectation($pattern), implode('', file($path)), $message); } function &_getShell() { return $this->_current_shell; } function &_createShell() { $shell = &new SimpleShell(); return $shell; } }   if (version_compare(phpversion(), '5') >= 0) { } else { } class SimpleTest { function getVersion() { $content = file(dirname(__FILE__) . '/VERSION'); return trim($content[0]); } function ignore($class) { $registry = &SimpleTest::_getRegistry(); $registry['IgnoreList'][strtolower($class)] = true; } function ignoreParentsIfIgnored($classes) { $registry = &SimpleTest::_getRegistry(); foreach ($classes as $class) { if (SimpleTest::isIgnored($class)) { $reflection = new SimpleReflection($class); if ($parent = $reflection->getParent()) { SimpleTest::ignore($parent); } } } } function prefer(&$object) { $registry = &SimpleTest::_getRegistry(); $registry['Preferred'][] = &$object; } function &preferred($classes) { if (! is_array($classes)) { $classes = array($classes); } $registry = &SimpleTest::_getRegistry(); for ($i = count($registry['Preferred']) - 1; $i >= 0; $i--) { foreach ($classes as $class) { if (SimpleTestCompatibility::isA($registry['Preferred'][$i], $class)) { return $registry['Preferred'][$i]; } } } return null; } function isIgnored($class) { $registry = &SimpleTest::_getRegistry(); return isset($registry['IgnoreList'][strtolower($class)]); } function setMockBaseClass($mock_base) { $registry = &SimpleTest::_getRegistry(); $registry['MockBaseClass'] = $mock_base; } function getMockBaseClass() { $registry = &SimpleTest::_getRegistry(); return $registry['MockBaseClass']; } function useProxy($proxy, $username = false, $password = false) { $registry = &SimpleTest::_getRegistry(); $registry['DefaultProxy'] = $proxy; $registry['DefaultProxyUsername'] = $username; $registry['DefaultProxyPassword'] = $password; } function getDefaultProxy() { $registry = &SimpleTest::_getRegistry(); return $registry['DefaultProxy']; } function getDefaultProxyUsername() { $registry = &SimpleTest::_getRegistry(); return $registry['DefaultProxyUsername']; } function getDefaultProxyPassword() { $registry = &SimpleTest::_getRegistry(); return $registry['DefaultProxyPassword']; } function &_getRegistry() { static $registry = false; if (! $registry) { $registry = SimpleTest::_getDefaults(); } return $registry; } function &getContext() { static $context = false; if (! $context) { $context = new SimpleTestContext(); } return $context; } function _getDefaults() { return array( 'StubBaseClass' => 'SimpleStub', 'MockBaseClass' => 'SimpleMock', 'IgnoreList' => array(), 'DefaultProxy' => false, 'DefaultProxyUsername' => false, 'DefaultProxyPassword' => false, 'Preferred' => array(new HtmlReporter(), new TextReporter(), new XmlReporter())); } } class SimpleTestContext { var $_test; var $_reporter; var $_resources; function clear() { $this->_resources = array(); } function setTest(&$test) { $this->clear(); $this->_test = &$test; } function &getTest() { return $this->_test; } function setReporter(&$reporter) { $this->clear(); $this->_reporter = &$reporter; } function &getReporter() { return $this->_reporter; } function &get($resource) { if (! isset($this->_resources[$resource])) { $this->_resources[$resource] = &new $resource(); } return $this->_resources[$resource]; } } class SimpleStackTrace { var $_prefixes; function SimpleStackTrace($prefixes) { $this->_prefixes = $prefixes; } function traceMethod($stack = false) { $stack = $stack ? $stack : $this->_captureTrace(); foreach ($stack as $frame) { if ($this->_frameLiesWithinSimpleTestFolder($frame)) { continue; } if ($this->_frameMatchesPrefix($frame)) { return ' at [' . $frame['file'] . ' line ' . $frame['line'] . ']'; } } return ''; } function _frameLiesWithinSimpleTestFolder($frame) { if (isset($frame['file'])) { $path = substr(SIMPLE_TEST, 0, -1); if (strpos($frame['file'], $path) === 0) { if (dirname($frame['file']) == $path) { return true; } } } return false; } function _frameMatchesPrefix($frame) { foreach ($this->_prefixes as $prefix) { if (strncmp($frame['function'], $prefix, strlen($prefix)) == 0) { return true; } } return false; } function _captureTrace() { if (function_exists('debug_backtrace')) { return array_reverse(debug_backtrace()); } return array(); } } class SimpleTestOptions extends SimpleTest { function getVersion() { return Simpletest::getVersion(); } function ignore($class) { return Simpletest::ignore($class); } function isIgnored($class) { return Simpletest::isIgnored($class); } function setMockBaseClass($mock_base) { return Simpletest::setMockBaseClass($mock_base); } function getMockBaseClass() { return Simpletest::getMockBaseClass(); } function useProxy($proxy, $username = false, $password = false) { return Simpletest::useProxy($proxy, $username, $password); } function getDefaultProxy() { return Simpletest::getDefaultProxy(); } function getDefaultProxyUsername() { return Simpletest::getDefaultProxyUsername(); } function getDefaultProxyPassword() { return Simpletest::getDefaultProxyPassword(); } }   class SimpleStickyError { var $_error = 'Constructor not chained'; function SimpleStickyError() { $this->_clearError(); } function isError() { return ($this->_error != ''); } function getError() { return $this->_error; } function _setError($error) { $this->_error = $error; } function _clearError() { $this->_setError(''); } } class SimpleSocket extends SimpleStickyError { var $_handle; var $_is_open = false; var $_sent = ''; var $lock_size; function SimpleSocket($host, $port, $timeout, $block_size = 255) { $this->SimpleStickyError(); if (! ($this->_handle = $this->_openSocket($host, $port, $error_number, $error, $timeout))) { $this->_setError("Cannot open [$host:$port] with [$error] within [$timeout] seconds"); return; } $this->_is_open = true; $this->_block_size = $block_size; SimpleTestCompatibility::setTimeout($this->_handle, $timeout); } function write($message) { if ($this->isError() || ! $this->isOpen()) { return false; } $count = fwrite($this->_handle, $message); if (! $count) { if ($count === false) { $this->_setError('Cannot write to socket'); $this->close(); } return false; } fflush($this->_handle); $this->_sent .= $message; return true; } function read() { if ($this->isError() || ! $this->isOpen()) { return false; } $raw = @fread($this->_handle, $this->_block_size); if ($raw === false) { $this->_setError('Cannot read from socket'); $this->close(); } return $raw; } function isOpen() { return $this->_is_open; } function close() { $this->_is_open = false; return fclose($this->_handle); } function getSent() { return $this->_sent; } function _openSocket($host, $port, &$error_number, &$error, $timeout) { return @fsockopen($host, $port, $error_number, $error, $timeout); } } class SimpleSecureSocket extends SimpleSocket { function SimpleSecureSocket($host, $port, $timeout) { $this->SimpleSocket($host, $port, $timeout); } function _openSocket($host, $port, &$error_number, &$error, $timeout) { return parent::_openSocket("tls://$host", $port, $error_number, $error, $timeout); } }   class SimpleTag { var $_name; var $_attributes; var $_content; function SimpleTag($name, $attributes) { $this->_name = strtolower(trim($name)); $this->_attributes = $attributes; $this->_content = ''; } function expectEndTag() { return true; } function isPrivateContent() { return false; } function addContent($content) { $this->_content .= (string)$content; } function addTag(&$tag) { } function getTagName() { return $this->_name; } function getChildElements() { return array(); } function getAttribute($label) { $label = strtolower($label); if (! isset($this->_attributes[$label])) { return false; } return (string)$this->_attributes[$label]; } function _setAttribute($label, $value) { $this->_attributes[strtolower($label)] = $value; } function getContent() { return $this->_content; } function getText() { return SimpleHtmlSaxParser::normalise($this->_content); } function isId($id) { return ($this->getAttribute('id') == $id); } } class SimpleBaseTag extends SimpleTag { function SimpleBaseTag($attributes) { $this->SimpleTag('base', $attributes); } function expectEndTag() { return false; } } class SimpleTitleTag extends SimpleTag { function SimpleTitleTag($attributes) { $this->SimpleTag('title', $attributes); } } class SimpleAnchorTag extends SimpleTag { function SimpleAnchorTag($attributes) { $this->SimpleTag('a', $attributes); } function getHref() { $url = $this->getAttribute('href'); if (is_bool($url)) { $url = ''; } return $url; } } class SimpleWidget extends SimpleTag { var $_value; var $_label; var $_is_set; function SimpleWidget($name, $attributes) { $this->SimpleTag($name, $attributes); $this->_value = false; $this->_label = false; $this->_is_set = false; } function getName() { return $this->getAttribute('name'); } function getDefault() { return $this->getAttribute('value'); } function getValue() { if (! $this->_is_set) { return $this->getDefault(); } return $this->_value; } function setValue($value) { $this->_value = $value; $this->_is_set = true; return true; } function resetValue() { $this->_is_set = false; } function setLabel($label) { $this->_label = trim($label); } function isLabel($label) { return $this->_label == trim($label); } function write(&$encoding) { if ($this->getName()) { $encoding->add($this->getName(), $this->getValue()); } } } class SimpleTextTag extends SimpleWidget { function SimpleTextTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', ''); } } function expectEndTag() { return false; } function setValue($value) { if ($this->getAttribute('type') == 'hidden') { return false; } return parent::setValue($value); } } class SimpleSubmitTag extends SimpleWidget { function SimpleSubmitTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', 'Submit'); } } function expectEndTag() { return false; } function setValue($value) { return false; } function getLabel() { return $this->getValue(); } function isLabel($label) { return trim($label) == trim($this->getLabel()); } } class SimpleImageSubmitTag extends SimpleWidget { function SimpleImageSubmitTag($attributes) { $this->SimpleWidget('input', $attributes); } function expectEndTag() { return false; } function setValue($value) { return false; } function getLabel() { if ($this->getAttribute('title')) { return $this->getAttribute('title'); } return $this->getAttribute('alt'); } function isLabel($label) { return trim($label) == trim($this->getLabel()); } function write(&$encoding, $x, $y) { if ($this->getName()) { $encoding->add($this->getName() . '.x', $x); $encoding->add($this->getName() . '.y', $y); } else { $encoding->add('x', $x); $encoding->add('y', $y); } } } class SimpleButtonTag extends SimpleWidget { function SimpleButtonTag($attributes) { $this->SimpleWidget('button', $attributes); } function expectEndTag() { return true; } function setValue($value) { return false; } function getLabel() { return $this->getContent(); } function isLabel($label) { return trim($label) == trim($this->getLabel()); } } class SimpleTextAreaTag extends SimpleWidget { function SimpleTextAreaTag($attributes) { $this->SimpleWidget('textarea', $attributes); } function getDefault() { return $this->_wrap(SimpleHtmlSaxParser::decodeHtml($this->getContent())); } function setValue($value) { return parent::setValue($this->_wrap($value)); } function _wrapIsEnabled() { if ($this->getAttribute('cols')) { $wrap = $this->getAttribute('wrap'); if (($wrap == 'physical') || ($wrap == 'hard')) { return true; } } return false; } function _wrap($text) { $text = str_replace("\r\r\n", "\r\n", str_replace("\n", "\r\n", $text)); $text = str_replace("\r\n\n", "\r\n", str_replace("\r", "\r\n", $text)); if (strncmp($text, "\r\n", strlen("\r\n")) == 0) { $text = substr($text, strlen("\r\n")); } if ($this->_wrapIsEnabled()) { return wordwrap( $text, (integer)$this->getAttribute('cols'), "\r\n"); } return $text; } function isPrivateContent() { return true; } } class SimpleUploadTag extends SimpleWidget { function SimpleUploadTag($attributes) { $this->SimpleWidget('input', $attributes); } function expectEndTag() { return false; } function write(&$encoding) { if (! file_exists($this->getValue())) { return; } $encoding->attach( $this->getName(), implode('', file($this->getValue())), basename($this->getValue())); } } class SimpleSelectionTag extends SimpleWidget { var $_options; var $_choice; function SimpleSelectionTag($attributes) { $this->SimpleWidget('select', $attributes); $this->_options = array(); $this->_choice = false; } function addTag(&$tag) { if ($tag->getTagName() == 'option') { $this->_options[] = &$tag; } } function addContent($content) { } function getDefault() { for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->getAttribute('selected') !== false) { return $this->_options[$i]->getDefault(); } } if ($count > 0) { return $this->_options[0]->getDefault(); } return ''; } function setValue($value) { for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->isValue($value)) { $this->_choice = $i; return true; } } return false; } function getValue() { if ($this->_choice === false) { return $this->getDefault(); } return $this->_options[$this->_choice]->getValue(); } } class MultipleSelectionTag extends SimpleWidget { var $_options; var $_values; function MultipleSelectionTag($attributes) { $this->SimpleWidget('select', $attributes); $this->_options = array(); $this->_values = false; } function addTag(&$tag) { if ($tag->getTagName() == 'option') { $this->_options[] = &$tag; } } function addContent($content) { } function getDefault() { $default = array(); for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->getAttribute('selected') !== false) { $default[] = $this->_options[$i]->getDefault(); } } return $default; } function setValue($desired) { $achieved = array(); foreach ($desired as $value) { $success = false; for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->isValue($value)) { $achieved[] = $this->_options[$i]->getValue(); $success = true; break; } } if (! $success) { return false; } } $this->_values = $achieved; return true; } function getValue() { if ($this->_values === false) { return $this->getDefault(); } return $this->_values; } } class SimpleOptionTag extends SimpleWidget { function SimpleOptionTag($attributes) { $this->SimpleWidget('option', $attributes); } function setValue($value) { return false; } function isValue($compare) { $compare = trim($compare); if (trim($this->getValue()) == $compare) { return true; } return trim($this->getContent()) == $compare; } function getDefault() { if ($this->getAttribute('value') === false) { return $this->getContent(); } return $this->getAttribute('value'); } function isPrivateContent() { return true; } } class SimpleRadioButtonTag extends SimpleWidget { function SimpleRadioButtonTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', 'on'); } } function expectEndTag() { return false; } function setValue($value) { if ($value === false) { return parent::setValue($value); } if ($value != $this->getAttribute('value')) { return false; } return parent::setValue($value); } function getDefault() { if ($this->getAttribute('checked') !== false) { return $this->getAttribute('value'); } return false; } } class SimpleCheckboxTag extends SimpleWidget { function SimpleCheckboxTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', 'on'); } } function expectEndTag() { return false; } function setValue($value) { if ($value === false) { return parent::setValue($value); } if ($value === true) { return parent::setValue($this->getAttribute('value')); } if ($value != $this->getAttribute('value')) { return false; } return parent::setValue($value); } function getDefault() { if ($this->getAttribute('checked') !== false) { return $this->getAttribute('value'); } return false; } } class SimpleTagGroup { var $_widgets = array(); function addWidget(&$widget) { $this->_widgets[] = &$widget; } function &_getWidgets() { return $this->_widgets; } function getAttribute($label) { return false; } function getName() { if (count($this->_widgets) > 0) { return $this->_widgets[0]->getName(); } } function isId($id) { for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($this->_widgets[$i]->isId($id)) { return true; } } return false; } function isLabel($label) { for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($this->_widgets[$i]->isLabel($label)) { return true; } } return false; } function write(&$encoding) { $encoding->add($this->getName(), $this->getValue()); } } class SimpleCheckboxGroup extends SimpleTagGroup { function getValue() { $values = array(); $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getValue() !== false) { $values[] = $widgets[$i]->getValue(); } } return $this->_coerceValues($values); } function getDefault() { $values = array(); $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getDefault() !== false) { $values[] = $widgets[$i]->getDefault(); } } return $this->_coerceValues($values); } function setValue($values) { $values = $this->_makeArray($values); if (! $this->_valuesArePossible($values)) { return false; } $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { $possible = $widgets[$i]->getAttribute('value'); if (in_array($widgets[$i]->getAttribute('value'), $values)) { $widgets[$i]->setValue($possible); } else { $widgets[$i]->setValue(false); } } return true; } function _valuesArePossible($values) { $matches = array(); $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { $possible = $widgets[$i]->getAttribute('value'); if (in_array($possible, $values)) { $matches[] = $possible; } } return ($values == $matches); } function _coerceValues($values) { if (count($values) == 0) { return false; } elseif (count($values) == 1) { return $values[0]; } else { return $values; } } function _makeArray($value) { if ($value === false) { return array(); } if (is_string($value)) { return array($value); } return $value; } } class SimpleRadioGroup extends SimpleTagGroup { function setValue($value) { if (! $this->_valueIsPossible($value)) { return false; } $index = false; $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if (! $widgets[$i]->setValue($value)) { $widgets[$i]->setValue(false); } } return true; } function _valueIsPossible($value) { $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getAttribute('value') == $value) { return true; } } return false; } function getValue() { $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getValue() !== false) { return $widgets[$i]->getValue(); } } return false; } function getDefault() { $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getDefault() !== false) { return $widgets[$i]->getDefault(); } } return false; } } class SimpleLabelTag extends SimpleTag { function SimpleLabelTag($attributes) { $this->SimpleTag('label', $attributes); } function getFor() { return $this->getAttribute('for'); } } class SimpleFormTag extends SimpleTag { function SimpleFormTag($attributes) { $this->SimpleTag('form', $attributes); } } class SimpleFrameTag extends SimpleTag { function SimpleFrameTag($attributes) { $this->SimpleTag('frame', $attributes); } function expectEndTag() { return false; } }   if (version_compare(phpversion(), '5') >= 0) { } else { } if (! defined('SIMPLE_TEST')) { define('SIMPLE_TEST', dirname(__FILE__) . DIRECTORY_SEPARATOR); } class SimpleTestCase { var $_label = false; var $_reporter; var $_observers; var $_should_skip = false; function SimpleTestCase($label = false) { if ($label) { $this->_label = $label; } } function getLabel() { return $this->_label ? $this->_label : get_class($this); } function skip() { } function skipIf($should_skip, $message = '%s') { if ($should_skip && ! $this->_should_skip) { $this->_should_skip = true; $message = sprintf($message, 'Skipping [' . get_class($this) . ']'); $this->_reporter->paintSkip($message . $this->getAssertionLine()); } } function skipUnless($shouldnt_skip, $message = false) { $this->skipIf(! $shouldnt_skip, $message); } function &createInvoker() { $invoker = &new SimpleErrorTrappingInvoker(new SimpleInvoker($this)); if (version_compare(phpversion(), '5') >= 0) { $invoker = &new SimpleExceptionTrappingInvoker($invoker); } return $invoker; } function run(&$reporter) { $context = &SimpleTest::getContext(); $context->setTest($this); $context->setReporter($reporter); $this->_reporter = &$reporter; $started = false; foreach ($this->getTests() as $method) { if ($reporter->shouldInvoke($this->getLabel(), $method)) { $this->skip(); if ($this->_should_skip) { break; } if (! $started) { $reporter->paintCaseStart($this->getLabel()); $started = true; } $invoker = &$this->_reporter->createInvoker($this->createInvoker()); $invoker->before($method); $invoker->invoke($method); $invoker->after($method); } } if ($started) { $reporter->paintCaseEnd($this->getLabel()); } unset($this->_reporter); return $reporter->getStatus(); } function getTests() { $methods = array(); foreach (get_class_methods(get_class($this)) as $method) { if ($this->_isTest($method)) { $methods[] = $method; } } return $methods; } function _isTest($method) { if (strtolower(substr($method, 0, 4)) == 'test') { return ! SimpleTestCompatibility::isA($this, strtolower($method)); } return false; } function before($method) { $this->_reporter->paintMethodStart($method); $this->_observers = array(); } function setUp() { } function tearDown() { } function after($method) { for ($i = 0; $i < count($this->_observers); $i++) { $this->_observers[$i]->atTestEnd($method, $this); } $this->_reporter->paintMethodEnd($method); } function tell(&$observer) { $this->_observers[] = &$observer; } function pass($message = "Pass") { if (! isset($this->_reporter)) { trigger_error('Can only make assertions within test methods'); } $this->_reporter->paintPass( $message . $this->getAssertionLine()); return true; } function fail($message = "Fail") { if (! isset($this->_reporter)) { trigger_error('Can only make assertions within test methods'); } $this->_reporter->paintFail( $message . $this->getAssertionLine()); return false; } function error($severity, $message, $file, $line) { if (! isset($this->_reporter)) { trigger_error('Can only make assertions within test methods'); } $this->_reporter->paintError( "Unexpected PHP error [$message] severity [$severity] in [$file line $line]"); } function exception($exception) { $this->_reporter->paintException($exception); } function signal($type, &$payload) { if (! isset($this->_reporter)) { trigger_error('Can only make assertions within test methods'); } $this->_reporter->paintSignal($type, $payload); } function assert(&$expectation, $compare, $message = '%s') { if ($expectation->test($compare)) { return $this->pass(sprintf( $message, $expectation->overlayMessage($compare, $this->_reporter->getDumper()))); } else { return $this->fail(sprintf( $message, $expectation->overlayMessage($compare, $this->_reporter->getDumper()))); } } function assertExpectation(&$expectation, $compare, $message = '%s') { return $this->assert($expectation, $compare, $message); } function getAssertionLine() { $trace = new SimpleStackTrace(array('assert', 'expect', 'pass', 'fail', 'skip')); return $trace->traceMethod(); } function dump($variable, $message = false) { $dumper = $this->_reporter->getDumper(); $formatted = $dumper->dump($variable); if ($message) { $formatted = $message . "\n" . $formatted; } $this->_reporter->paintFormattedMessage($formatted); return $variable; } function sendMessage($message) { $this->_reporter->PaintMessage($message); } function getSize() { return 1; } } class SimpleFileLoader { function &load($test_file) { $existing_classes = get_declared_classes(); $existing_globals = get_defined_vars(); $new_globals = get_defined_vars(); $this->_makeFileVariablesGlobal($existing_globals, $new_globals); $new_classes = array_diff(get_declared_classes(), $existing_classes); if (empty($new_classes)) { $new_classes = $this->_scrapeClassesFromFile($test_file); } $classes = $this->selectRunnableTests($new_classes); $suite = &$this->createSuiteFromClasses($test_file, $classes); return $suite; } function _makeFileVariablesGlobal($existing, $new) { $globals = array_diff(array_keys($new), array_keys($existing)); foreach ($globals as $global) { $_GLOBALS[$global] = $new[$global]; } } function _scrapeClassesFromFile($test_file) { preg_match_all('~^\s*class\s+(\w+)(\s+(extends|implements)\s+\w+)*\s*\{~mi', file_get_contents($test_file), $matches ); return $matches[1]; } function selectRunnableTests($candidates) { $classes = array(); foreach ($candidates as $class) { if (TestSuite::getBaseTestCase($class)) { $reflection = new SimpleReflection($class); if ($reflection->isAbstract()) { SimpleTest::ignore($class); } else { $classes[] = $class; } } } return $classes; } function &createSuiteFromClasses($title, $classes) { if (count($classes) == 0) { $suite = &new BadTestSuite($title, "No runnable test cases in [$title]"); return $suite; } SimpleTest::ignoreParentsIfIgnored($classes); $suite = &new TestSuite($title); foreach ($classes as $class) { if (! SimpleTest::isIgnored($class)) { $suite->addTestClass($class); } } return $suite; } } class TestSuite { var $_label; var $_test_cases; function TestSuite($label = false) { $this->_label = $label; $this->_test_cases = array(); } function getLabel() { if (! $this->_label) { return ($this->getSize() == 1) ? get_class($this->_test_cases[0]) : get_class($this); } else { return $this->_label; } } function addTestCase(&$test_case) { $this->_test_cases[] = &$test_case; } function addTestClass($class) { if (TestSuite::getBaseTestCase($class) == 'testsuite') { $this->_test_cases[] = &new $class(); } else { $this->_test_cases[] = $class; } } function add(&$test_case) { if (! is_string($test_case)) { $this->_test_cases[] = &$test_case; } elseif (TestSuite::getBaseTestCase($class) == 'testsuite') { $this->_test_cases[] = &new $class(); } else { $this->_test_cases[] = $class; } } function addTestFile($test_file) { $this->addFile($test_file); } function addFile($test_file) { $extractor = new SimpleFileLoader(); $this->add($extractor->load($test_file)); } function collect($path, &$collector) { $collector->collect($this, $path); } function run(&$reporter) { $reporter->paintGroupStart($this->getLabel(), $this->getSize()); for ($i = 0, $count = count($this->_test_cases); $i < $count; $i++) { if (is_string($this->_test_cases[$i])) { $class = $this->_test_cases[$i]; $test = &new $class(); $test->run($reporter); unset($test); } else { $this->_test_cases[$i]->run($reporter); } } $reporter->paintGroupEnd($this->getLabel()); return $reporter->getStatus(); } function getSize() { $count = 0; foreach ($this->_test_cases as $case) { if (is_string($case)) { if (! SimpleTest::isIgnored($case)) { $count++; } } else { $count += $case->getSize(); } } return $count; } function getBaseTestCase($class) { while ($class = get_parent_class($class)) { $class = strtolower($class); if ($class == 'simpletestcase' || $class == 'testsuite') { return $class; } } return false; } } class GroupTest extends TestSuite { } class BadTestSuite { var $_label; var $_error; function BadTestSuite($label, $error) { $this->_label = $label; $this->_error = $error; } function getLabel() { return $this->_label; } function run(&$reporter) { $reporter->paintGroupStart($this->getLabel(), $this->getSize()); $reporter->paintFail('Bad TestSuite [' . $this->getLabel() . '] with error [' . $this->_error . ']'); $reporter->paintGroupEnd($this->getLabel()); return $reporter->getStatus(); } function getSize() { return 0; } } class BadGroupTest extends BadTestSuite { }   class UnitTestCase extends SimpleTestCase { function UnitTestCase($label = false) { if (! $label) { $label = get_class($this); } $this->SimpleTestCase($label); } function assertTrue($result, $message = false) { return $this->assert(new TrueExpectation(), $result, $message); } function assertFalse($result, $message = '%s') { return $this->assert(new FalseExpectation(), $result, $message); } function assertNull($value, $message = '%s') { $dumper = &new SimpleDumper(); $message = sprintf( $message, '[' . $dumper->describeValue($value) . '] should be null'); return $this->assertTrue(! isset($value), $message); } function assertNotNull($value, $message = '%s') { $dumper = &new SimpleDumper(); $message = sprintf( $message, '[' . $dumper->describeValue($value) . '] should not be null'); return $this->assertTrue(isset($value), $message); } function assertIsA($object, $type, $message = '%s') { return $this->assert( new IsAExpectation($type), $object, $message); } function assertNotA($object, $type, $message = '%s') { return $this->assert( new NotAExpectation($type), $object, $message); } function assertEqual($first, $second, $message = '%s') { return $this->assert( new EqualExpectation($first), $second, $message); } function assertNotEqual($first, $second, $message = '%s') { return $this->assert( new NotEqualExpectation($first), $second, $message); } function assertWithinMargin($first, $second, $margin, $message = '%s') { return $this->assert( new WithinMarginExpectation($first, $margin), $second, $message); } function assertOutsideMargin($first, $second, $margin, $message = '%s') { return $this->assert( new OutsideMarginExpectation($first, $margin), $second, $message); } function assertIdentical($first, $second, $message = '%s') { return $this->assert( new IdenticalExpectation($first), $second, $message); } function assertNotIdentical($first, $second, $message = '%s') { return $this->assert( new NotIdenticalExpectation($first), $second, $message); } function assertReference(&$first, &$second, $message = '%s') { $dumper = &new SimpleDumper(); $message = sprintf( $message, '[' . $dumper->describeValue($first) . '] and [' . $dumper->describeValue($second) . '] should reference the same object'); return $this->assertTrue( SimpleTestCompatibility::isReference($first, $second), $message); } function assertClone(&$first, &$second, $message = '%s') { $dumper = &new SimpleDumper(); $message = sprintf( $message, '[' . $dumper->describeValue($first) . '] and [' . $dumper->describeValue($second) . '] should not be the same object'); $identical = &new IdenticalExpectation($first); return $this->assertTrue( $identical->test($second) && ! SimpleTestCompatibility::isReference($first, $second), $message); } function assertCopy(&$first, &$second, $message = "%s") { $dumper = &new SimpleDumper(); $message = sprintf( $message, "[" . $dumper->describeValue($first) . "] and [" . $dumper->describeValue($second) . "] should not be the same object"); return $this->assertFalse( SimpleTestCompatibility::isReference($first, $second), $message); } function assertPattern($pattern, $subject, $message = '%s') { return $this->assert( new PatternExpectation($pattern), $subject, $message); } function assertWantedPattern($pattern, $subject, $message = '%s') { return $this->assertPattern($pattern, $subject, $message); } function assertNoPattern($pattern, $subject, $message = '%s') { return $this->assert( new NoPatternExpectation($pattern), $subject, $message); } function assertNoUnwantedPattern($pattern, $subject, $message = '%s') { return $this->assertNoPattern($pattern, $subject, $message); } function swallowErrors() { $context = &SimpleTest::getContext(); $queue = &$context->get('SimpleErrorQueue'); $queue->clear(); } function assertNoErrors($message = '%s') { $context = &SimpleTest::getContext(); $queue = &$context->get('SimpleErrorQueue'); return $queue->assertNoErrors($message); } function assertError($expected = false, $message = '%s') { $context = &SimpleTest::getContext(); $queue = &$context->get('SimpleErrorQueue'); return $queue->assertError($this->_coerceExpectation($expected), $message); } function expectError($expected = false, $message = '%s') { $context = &SimpleTest::getContext(); $queue = &$context->get('SimpleErrorQueue'); $queue->expectError($this->_coerceExpectation($expected), $message); } function expectException($expected = false, $message = '%s') { $context = &SimpleTest::getContext(); $queue = &$context->get('SimpleExceptionTrap'); $line = $this->getAssertionLine(); $queue->expectException($expected, $message . $line); } function _coerceExpectation($expected) { if ($expected == false) { return new TrueExpectation(); } if (SimpleTestCompatibility::isA($expected, 'SimpleExpectation')) { return $expected; } return new EqualExpectation( is_string($expected) ? str_replace('%', '%%', $expected) : $expected); } function assertErrorPattern($pattern, $message = '%s') { return $this->assertError(new PatternExpectation($pattern), $message); } }   class SimpleUrl { var $_scheme; var $_username; var $_password; var $_host; var $_port; var $_path; var $_request; var $_fragment; var $_x; var $_y; var $_target; var $_raw = false; function SimpleUrl($url = '') { list($x, $y) = $this->_chompCoordinates($url); $this->setCoordinates($x, $y); $this->_scheme = $this->_chompScheme($url); list($this->_username, $this->_password) = $this->_chompLogin($url); $this->_host = $this->_chompHost($url); $this->_port = false; if (preg_match('/(.*?):(.*)/', $this->_host, $host_parts)) { $this->_host = $host_parts[1]; $this->_port = (integer)$host_parts[2]; } $this->_path = $this->_chompPath($url); $this->_request = $this->_parseRequest($this->_chompRequest($url)); $this->_fragment = (strncmp($url, "#", 1) == 0 ? substr($url, 1) : false); $this->_target = false; } function _chompCoordinates(&$url) { if (preg_match('/(.*)\?(\d+),(\d+)$/', $url, $matches)) { $url = $matches[1]; return array((integer)$matches[2], (integer)$matches[3]); } return array(false, false); } function _chompScheme(&$url) { if (preg_match('/^([^\/:]*):(\/\/)(.*)/', $url, $matches)) { $url = $matches[2] . $matches[3]; return $matches[1]; } return false; } function _chompLogin(&$url) { $prefix = ''; if (preg_match('/^(\/\/)(.*)/', $url, $matches)) { $prefix = $matches[1]; $url = $matches[2]; } if (preg_match('/^([^\/]*)@(.*)/', $url, $matches)) { $url = $prefix . $matches[2]; $parts = split(":", $matches[1]); return array( urldecode($parts[0]), isset($parts[1]) ? urldecode($parts[1]) : false); } $url = $prefix . $url; return array(false, false); } function _chompHost(&$url) { if (preg_match('/^(\/\/)(.*?)(\/.*|\?.*|#.*|$)/', $url, $matches)) { $url = $matches[3]; return $matches[2]; } if (preg_match('/(.*?)(\.\.\/|\.\/|\/|\?|#|$)(.*)/', $url, $matches)) { $tlds = SimpleUrl::getAllTopLevelDomains(); if (preg_match('/[a-z0-9\-]+\.(' . $tlds . ')/i', $matches[1])) { $url = $matches[2] . $matches[3]; return $matches[1]; } elseif (preg_match('/[a-z0-9\-]+\.[a-z0-9\-]+\.[a-z0-9\-]+/i', $matches[1])) { $url = $matches[2] . $matches[3]; return $matches[1]; } } return false; } function _chompPath(&$url) { if (preg_match('/(.*?)(\?|#|$)(.*)/', $url, $matches)) { $url = $matches[2] . $matches[3]; return ($matches[1] ? $matches[1] : ''); } return ''; } function _chompRequest(&$url) { if (preg_match('/\?(.*?)(#|$)(.*)/', $url, $matches)) { $url = $matches[2] . $matches[3]; return $matches[1]; } return ''; } function _parseRequest($raw) { $this->_raw = $raw; $request = new SimpleGetEncoding(); foreach (split("&", $raw) as $pair) { if (preg_match('/(.*?)=(.*)/', $pair, $matches)) { $request->add($matches[1], urldecode($matches[2])); } elseif ($pair) { $request->add($pair, ''); } } return $request; } function getScheme($default = false) { return $this->_scheme ? $this->_scheme : $default; } function getUsername() { return $this->_username; } function getPassword() { return $this->_password; } function getHost($default = false) { return $this->_host ? $this->_host : $default; } function getTld() { $path_parts = pathinfo($this->getHost()); return (isset($path_parts['extension']) ? $path_parts['extension'] : false); } function getPort() { return $this->_port; } function getPath() { if (! $this->_path && $this->_host) { return '/'; } return $this->_path; } function getPage() { if (! preg_match('/([^\/]*?)$/', $this->getPath(), $matches)) { return false; } return $matches[1]; } function getBasePath() { if (! preg_match('/(.*\/)[^\/]*?$/', $this->getPath(), $matches)) { return false; } return $matches[1]; } function getFragment() { return $this->_fragment; } function setCoordinates($x = false, $y = false) { if (($x === false) || ($y === false)) { $this->_x = $this->_y = false; return; } $this->_x = (integer)$x; $this->_y = (integer)$y; } function getX() { return $this->_x; } function getY() { return $this->_y; } function getEncodedRequest() { if ($this->_raw) { $encoded = $this->_raw; } else { $encoded = $this->_request->asUrlRequest(); } if ($encoded) { return '?' . preg_replace('/^\?/', '', $encoded); } return ''; } function addRequestParameter($key, $value) { $this->_raw = false; $this->_request->add($key, $value); } function addRequestParameters($parameters) { $this->_raw = false; $this->_request->merge($parameters); } function clearRequest() { $this->_raw = false; $this->_request = &new SimpleGetEncoding(); } function getTarget() { return $this->_target; } function setTarget($frame) { $this->_raw = false; $this->_target = $frame; } function asString() { $path = $this->_path; $scheme = $identity = $host = $encoded = $fragment = ''; if ($this->_username && $this->_password) { $identity = $this->_username . ':' . $this->_password . '@'; } if ($this->getHost()) { $scheme = $this->getScheme() ? $this->getScheme() : 'http'; $scheme .= "://"; $host = $this->getHost(); } if (substr($this->_path, 0, 1) == '/') { $path = $this->normalisePath($this->_path); } $encoded = $this->getEncodedRequest(); $fragment = $this->getFragment() ? '#'. $this->getFragment() : ''; $coords = $this->getX() === false ? '' : '?' . $this->getX() . ',' . $this->getY(); return "$scheme$identity$host$path$encoded$fragment$coords"; } function makeAbsolute($base) { if (! is_object($base)) { $base = new SimpleUrl($base); } if ($this->getHost()) { $scheme = $this->getScheme(); $host = $this->getHost(); $port = $this->getPort() ? ':' . $this->getPort() : ''; $identity = $this->getIdentity() ? $this->getIdentity() . '@' : ''; if (! $identity) { $identity = $base->getIdentity() ? $base->getIdentity() . '@' : ''; } } else { $scheme = $base->getScheme(); $host = $base->getHost(); $port = $base->getPort() ? ':' . $base->getPort() : ''; $identity = $base->getIdentity() ? $base->getIdentity() . '@' : ''; } $path = $this->normalisePath($this->_extractAbsolutePath($base)); $encoded = $this->getEncodedRequest(); $fragment = $this->getFragment() ? '#'. $this->getFragment() : ''; $coords = $this->getX() === false ? '' : '?' . $this->getX() . ',' . $this->getY(); return new SimpleUrl("$scheme://$identity$host$port$path$encoded$fragment$coords"); } function _extractAbsolutePath($base) { if ($this->getHost()) { return $this->_path; } if (! $this->_isRelativePath($this->_path)) { return $this->_path; } if ($this->_path) { return $base->getBasePath() . $this->_path; } return $base->getPath(); } function _isRelativePath($path) { return (substr($path, 0, 1) != '/'); } function getIdentity() { if ($this->_username && $this->_password) { return $this->_username . ':' . $this->_password; } return false; } function normalisePath($path) { $path = preg_replace('|/\./|', '/', $path); return preg_replace('|/[^/]+/\.\./|', '/', $path); } function getAllTopLevelDomains() { return 'com|edu|net|org|gov|mil|int|biz|info|name|pro|aero|coop|museum'; } }   if (! defined('DEFAULT_MAX_REDIRECTS')) { define('DEFAULT_MAX_REDIRECTS', 3); } if (! defined('DEFAULT_CONNECTION_TIMEOUT')) { define('DEFAULT_CONNECTION_TIMEOUT', 15); } class SimpleUserAgent { var $_cookie_jar; var $_cookies_enabled = true; var $_authenticator; var $_max_redirects = DEFAULT_MAX_REDIRECTS; var $_proxy = false; var $_proxy_username = false; var $_proxy_password = false; var $_connection_timeout = DEFAULT_CONNECTION_TIMEOUT; var $_additional_headers = array(); function SimpleUserAgent() { $this->_cookie_jar = &new SimpleCookieJar(); $this->_authenticator = &new SimpleAuthenticator(); } function restart($date = false) { $this->_cookie_jar->restartSession($date); $this->_authenticator->restartSession(); } function addHeader($header) { $this->_additional_headers[] = $header; } function ageCookies($interval) { $this->_cookie_jar->agePrematurely($interval); } function setCookie($name, $value, $host = false, $path = '/', $expiry = false) { $this->_cookie_jar->setCookie($name, $value, $host, $path, $expiry); } function getCookieValue($host, $path, $name) { return $this->_cookie_jar->getCookieValue($host, $path, $name); } function getBaseCookieValue($name, $base) { if (! $base) { return null; } return $this->getCookieValue($base->getHost(), $base->getPath(), $name); } function ignoreCookies() { $this->_cookies_enabled = false; } function useCookies() { $this->_cookies_enabled = true; } function setConnectionTimeout($timeout) { $this->_connection_timeout = $timeout; } function setMaximumRedirects($max) { $this->_max_redirects = $max; } function useProxy($proxy, $username, $password) { if (! $proxy) { $this->_proxy = false; return; } if ((strncmp($proxy, 'http://', 7) != 0) && (strncmp($proxy, 'https://', 8) != 0)) { $proxy = 'http://'. $proxy; } $this->_proxy = &new SimpleUrl($proxy); $this->_proxy_username = $username; $this->_proxy_password = $password; } function _isTooManyRedirects($redirects) { return ($redirects > $this->_max_redirects); } function setIdentity($host, $realm, $username, $password) { $this->_authenticator->setIdentityForRealm($host, $realm, $username, $password); } function &fetchResponse($url, $encoding) { if ($encoding->getMethod() != 'POST') { $url->addRequestParameters($encoding); $encoding->clear(); } $response = &$this->_fetchWhileRedirected($url, $encoding); if ($headers = $response->getHeaders()) { if ($headers->isChallenge()) { $this->_authenticator->addRealm( $url, $headers->getAuthentication(), $headers->getRealm()); } } return $response; } function &_fetchWhileRedirected($url, $encoding) { $redirects = 0; do { $response = &$this->_fetch($url, $encoding); if ($response->isError()) { return $response; } $headers = $response->getHeaders(); $location = new SimpleUrl($headers->getLocation()); $url = $location->makeAbsolute($url); if ($this->_cookies_enabled) { $headers->writeCookiesToJar($this->_cookie_jar, $url); } if (! $headers->isRedirect()) { break; } $encoding = new SimpleGetEncoding(); } while (! $this->_isTooManyRedirects(++$redirects)); return $response; } function &_fetch($url, $encoding) { $request = &$this->_createRequest($url, $encoding); $response = &$request->fetch($this->_connection_timeout); return $response; } function &_createRequest($url, $encoding) { $request = &$this->_createHttpRequest($url, $encoding); $this->_addAdditionalHeaders($request); if ($this->_cookies_enabled) { $request->readCookiesFromJar($this->_cookie_jar, $url); } $this->_authenticator->addHeaders($request, $url); return $request; } function &_createHttpRequest($url, $encoding) { $request = &new SimpleHttpRequest($this->_createRoute($url), $encoding); return $request; } function &_createRoute($url) { if ($this->_proxy) { $route = &new SimpleProxyRoute( $url, $this->_proxy, $this->_proxy_username, $this->_proxy_password); } else { $route = &new SimpleRoute($url); } return $route; } function _addAdditionalHeaders(&$request) { foreach ($this->_additional_headers as $header) { $request->addHeaderLine($header); } } }   class FieldExpectation extends SimpleExpectation { var $_value; function FieldExpectation($value, $message = '%s') { $this->SimpleExpectation($message); if (is_array($value)) { sort($value); } $this->_value = $value; } function test($compare) { if ($this->_value === false) { return ($compare === false); } if ($this->_isSingle($this->_value)) { return $this->_testSingle($compare); } if (is_array($this->_value)) { return $this->_testMultiple($compare); } return false; } function _isSingle($value) { return is_string($value) || is_integer($value) || is_float($value); } function _testSingle($compare) { if (is_array($compare) && count($compare) == 1) { $compare = $compare[0]; } if (! $this->_isSingle($compare)) { return false; } return ($this->_value == $compare); } function _testMultiple($compare) { if (is_string($compare)) { $compare = array($compare); } if (! is_array($compare)) { return false; } sort($compare); return ($this->_value === $compare); } function testMessage($compare) { $dumper = &$this->_getDumper(); if (is_array($compare)) { sort($compare); } if ($this->test($compare)) { return "Field expectation [" . $dumper->describeValue($this->_value) . "]"; } else { return "Field expectation [" . $dumper->describeValue($this->_value) . "] fails with [" . $dumper->describeValue($compare) . "] " . $dumper->describeDifference($this->_value, $compare); } } } class HttpHeaderExpectation extends SimpleExpectation { var $_expected_header; var $_expected_value; function HttpHeaderExpectation($header, $value = false, $message = '%s') { $this->SimpleExpectation($message); $this->_expected_header = $this->_normaliseHeader($header); $this->_expected_value = $value; } function _getExpectation() { return $this->_expected_value; } function _normaliseHeader($header) { return strtolower(trim($header)); } function test($compare) { return is_string($this->_findHeader($compare)); } function _findHeader($compare) { $lines = split("\r\n", $compare); foreach ($lines as $line) { if ($this->_testHeaderLine($line)) { return $line; } } return false; } function _testHeaderLine($line) { if (count($parsed = split(':', $line, 2)) < 2) { return false; } list($header, $value) = $parsed; if ($this->_normaliseHeader($header) != $this->_expected_header) { return false; } return $this->_testHeaderValue($value, $this->_expected_value); } function _testHeaderValue($value, $expected) { if ($expected === false) { return true; } if (SimpleExpectation::isExpectation($expected)) { return $expected->test(trim($value)); } return (trim($value) == trim($expected)); } function testMessage($compare) { if (SimpleExpectation::isExpectation($this->_expected_value)) { $message = $this->_expected_value->overlayMessage($compare, $this->_getDumper()); } else { $message = $this->_expected_header . ($this->_expected_value ? ': ' . $this->_expected_value : ''); } if (is_string($line = $this->_findHeader($compare))) { return "Searching for header [$message] found [$line]"; } else { return "Failed to find header [$message]"; } } } class NoHttpHeaderExpectation extends HttpHeaderExpectation { var $_expected_header; var $_expected_value; function NoHttpHeaderExpectation($unwanted, $message = '%s') { $this->HttpHeaderExpectation($unwanted, false, $message); } function test($compare) { return ($this->_findHeader($compare) === false); } function testMessage($compare) { $expectation = $this->_getExpectation(); if (is_string($line = $this->_findHeader($compare))) { return "Found unwanted header [$expectation] with [$line]"; } else { return "Did not find unwanted header [$expectation]"; } } } class TextExpectation extends SimpleExpectation { var $_substring; function TextExpectation($substring, $message = '%s') { $this->SimpleExpectation($message); $this->_substring = $substring; } function _getSubstring() { return $this->_substring; } function test($compare) { return (strpos($compare, $this->_substring) !== false); } function testMessage($compare) { if ($this->test($compare)) { return $this->_describeTextMatch($this->_getSubstring(), $compare); } else { $dumper = &$this->_getDumper(); return "Text [" . $this->_getSubstring() . "] not detected in [" . $dumper->describeValue($compare) . "]"; } } function _describeTextMatch($substring, $subject) { $position = strpos($subject, $substring); $dumper = &$this->_getDumper(); return "Text [$substring] detected at character [$position] in [" . $dumper->describeValue($subject) . "] in region [" . $dumper->clipString($subject, 100, $position) . "]"; } } class NoTextExpectation extends TextExpectation { function NoTextExpectation($substring, $message = '%s') { $this->TextExpectation($substring, $message); } function test($compare) { return ! parent::test($compare); } function testMessage($compare) { if ($this->test($compare)) { $dumper = &$this->_getDumper(); return "Text [" . $this->_getSubstring() . "] not detected in [" . $dumper->describeValue($compare) . "]"; } else { return $this->_describeTextMatch($this->_getSubstring(), $compare); } } } class WebTestCase extends SimpleTestCase { var $_browser; var $_ignore_errors = false; function WebTestCase($label = false) { $this->SimpleTestCase($label); } function before($method) { parent::before($method); $this->setBrowser($this->createBrowser()); } function after($method) { $this->unsetBrowser(); parent::after($method); } function &getBrowser() { return $this->_browser; } function setBrowser(&$browser) { return $this->_browser = &$browser; } function unsetBrowser() { unset($this->_browser); } function &createBrowser() { $browser = &new SimpleBrowser(); return $browser; } function getTransportError() { return $this->_browser->getTransportError(); } function getUrl() { return $this->_browser->getUrl(); } function showRequest() { $this->dump($this->_browser->getRequest()); } function showHeaders() { $this->dump($this->_browser->getHeaders()); } function showSource() { $this->dump($this->_browser->getContent()); } function showText() { $this->dump(wordwrap($this->_browser->getContentAsText(), 80)); } function restart($date = false) { if ($date === false) { $date = time(); } $this->_browser->restart($date); } function ageCookies($interval) { $this->_browser->ageCookies($interval); } function ignoreFrames() { $this->_browser->ignoreFrames(); } function ignoreCookies() { $this->_browser->ignoreCookies(); } function ignoreErrors() { $this->_ignore_errors = true; } function _failOnError($result) { if (! $this->_ignore_errors) { if ($error = $this->_browser->getTransportError()) { $this->fail($error); } } $this->_ignore_errors = false; return $result; } function addHeader($header) { $this->_browser->addHeader($header); } function setMaximumRedirects($max) { if (! $this->_browser) { trigger_error( 'Can only set maximum redirects in a test method, setUp() or tearDown()'); } $this->_browser->setMaximumRedirects($max); } function setConnectionTimeout($timeout) { $this->_browser->setConnectionTimeout($timeout); } function useProxy($proxy, $username = false, $password = false) { $this->_browser->useProxy($proxy, $username, $password); } function get($url, $parameters = false) { return $this->_failOnError($this->_browser->get($url, $parameters)); } function post($url, $parameters = false) { return $this->_failOnError($this->_browser->post($url, $parameters)); } function head($url, $parameters = false) { return $this->_failOnError($this->_browser->head($url, $parameters)); } function retry() { return $this->_failOnError($this->_browser->retry()); } function back() { return $this->_failOnError($this->_browser->back()); } function forward() { return $this->_failOnError($this->_browser->forward()); } function authenticate($username, $password) { return $this->_failOnError( $this->_browser->authenticate($username, $password)); } function getCookie($name) { return $this->_browser->getCurrentCookieValue($name); } function setCookie($name, $value, $host = false, $path = '/', $expiry = false) { $this->_browser->setCookie($name, $value, $host, $path, $expiry); } function getFrameFocus() { return $this->_browser->getFrameFocus(); } function setFrameFocusByIndex($choice) { return $this->_browser->setFrameFocusByIndex($choice); } function setFrameFocus($name) { return $this->_browser->setFrameFocus($name); } function clearFrameFocus() { return $this->_browser->clearFrameFocus(); } function click($label) { return $this->_failOnError($this->_browser->click($label)); } function assertClickable($label, $message = '%s') { return $this->assertTrue( $this->_browser->isClickable($label), sprintf($message, "Click target [$label] should exist")); } function clickSubmit($label = 'Submit', $additional = false) { return $this->_failOnError( $this->_browser->clickSubmit($label, $additional)); } function clickSubmitByName($name, $additional = false) { return $this->_failOnError( $this->_browser->clickSubmitByName($name, $additional)); } function clickSubmitById($id, $additional = false) { return $this->_failOnError( $this->_browser->clickSubmitById($id, $additional)); } function assertSubmit($label, $message = '%s') { return $this->assertTrue( $this->_browser->isSubmit($label), sprintf($message, "Submit button [$label] should exist")); } function clickImage($label, $x = 1, $y = 1, $additional = false) { return $this->_failOnError( $this->_browser->clickImage($label, $x, $y, $additional)); } function clickImageByName($name, $x = 1, $y = 1, $additional = false) { return $this->_failOnError( $this->_browser->clickImageByName($name, $x, $y, $additional)); } function clickImageById($id, $x = 1, $y = 1, $additional = false) { return $this->_failOnError( $this->_browser->clickImageById($id, $x, $y, $additional)); } function assertImage($label, $message = '%s') { return $this->assertTrue( $this->_browser->isImage($label), sprintf($message, "Image with text [$label] should exist")); } function submitFormById($id) { return $this->_failOnError($this->_browser->submitFormById($id)); } function clickLink($label, $index = 0) { return $this->_failOnError($this->_browser->clickLink($label, $index)); } function clickLinkById($id) { return $this->_failOnError($this->_browser->clickLinkById($id)); } function assertLink($label, $expected = true, $message = '%s') { $url = $this->_browser->getLink($label); if ($expected === true || ($expected !== true && $url === false)) { return $this->assertTrue($url !== false, sprintf($message, "Link [$label] should exist")); } if (! SimpleExpectation::isExpectation($expected)) { $expected = new IdenticalExpectation($expected); } return $this->assert($expected, $url->asString(), sprintf($message, "Link [$label] should match")); } function assertNoLink($label, $message = '%s') { return $this->assertTrue( $this->_browser->getLink($label) === false, sprintf($message, "Link [$label] should not exist")); } function assertLinkById($id, $expected = true, $message = '%s') { $url = $this->_browser->getLinkById($id); if ($expected === true) { return $this->assertTrue($url !== false, sprintf($message, "Link ID [$id] should exist")); } if (! SimpleExpectation::isExpectation($expected)) { $expected = new IdenticalExpectation($expected); } return $this->assert($expected, $url->asString(), sprintf($message, "Link ID [$id] should match")); } function assertNoLinkById($id, $message = '%s') { return $this->assertTrue( $this->_browser->getLinkById($id) === false, sprintf($message, "Link ID [$id] should not exist")); } function setField($label, $value, $position=false) { return $this->_browser->setField($label, $value, $position); } function setFieldByName($name, $value, $position=false) { return $this->_browser->setFieldByName($name, $value, $position); } function setFieldById($id, $value) { return $this->_browser->setFieldById($id, $value); } function assertField($label, $expected = true, $message = '%s') { $value = $this->_browser->getField($label); return $this->_assertFieldValue($label, $value, $expected, $message); } function assertFieldByName($name, $expected = true, $message = '%s') { $value = $this->_browser->getFieldByName($name); return $this->_assertFieldValue($name, $value, $expected, $message); } function assertFieldById($id, $expected = true, $message = '%s') { $value = $this->_browser->getFieldById($id); return $this->_assertFieldValue($id, $value, $expected, $message); } function _assertFieldValue($identifier, $value, $expected, $message) { if ($expected === true) { return $this->assertTrue( isset($value), sprintf($message, "Field [$identifier] should exist")); } if (! SimpleExpectation::isExpectation($expected)) { $identifier = str_replace('%', '%%', $identifier); $expected = new FieldExpectation( $expected, "Field [$identifier] should match with [%s]"); } return $this->assert($expected, $value, $message); } function assertResponse($responses, $message = '%s') { $responses = (is_array($responses) ? $responses : array($responses)); $code = $this->_browser->getResponseCode(); $message = sprintf($message, "Expecting response in [" . implode(", ", $responses) . "] got [$code]"); return $this->assertTrue(in_array($code, $responses), $message); } function assertMime($types, $message = '%s') { $types = (is_array($types) ? $types : array($types)); $type = $this->_browser->getMimeType(); $message = sprintf($message, "Expecting mime type in [" . implode(", ", $types) . "] got [$type]"); return $this->assertTrue(in_array($type, $types), $message); } function assertAuthentication($authentication = false, $message = '%s') { if (! $authentication) { $message = sprintf($message, "Expected any authentication type, got [" . $this->_browser->getAuthentication() . "]"); return $this->assertTrue( $this->_browser->getAuthentication(), $message); } else { $message = sprintf($message, "Expected authentication [$authentication] got [" . $this->_browser->getAuthentication() . "]"); return $this->assertTrue( strtolower($this->_browser->getAuthentication()) == strtolower($authentication), $message); } } function assertNoAuthentication($message = '%s') { $message = sprintf($message, "Expected no authentication type, got [" . $this->_browser->getAuthentication() . "]"); return $this->assertFalse($this->_browser->getAuthentication(), $message); } function assertRealm($realm, $message = '%s') { if (! SimpleExpectation::isExpectation($realm)) { $realm = new EqualExpectation($realm); } return $this->assert( $realm, $this->_browser->getRealm(), "Expected realm -> $message"); } function assertHeader($header, $value = false, $message = '%s') { return $this->assert( new HttpHeaderExpectation($header, $value), $this->_browser->getHeaders(), $message); } function assertHeaderPattern($header, $pattern, $message = '%s') { return $this->assert( new HttpHeaderExpectation($header, new PatternExpectation($pattern)), $this->_browser->getHeaders(), $message); } function assertNoHeader($header, $message = '%s') { return $this->assert( new NoHttpHeaderExpectation($header), $this->_browser->getHeaders(), $message); } function assertNoUnwantedHeader($header, $message = '%s') { return $this->assertNoHeader($header, $message); } function assertTitle($title = false, $message = '%s') { if (! SimpleExpectation::isExpectation($title)) { $title = new EqualExpectation($title); } return $this->assert($title, $this->_browser->getTitle(), $message); } function assertText($text, $message = '%s') { return $this->assert( new TextExpectation($text), $this->_browser->getContentAsText(), $message); } function assertWantedText($text, $message = '%s') { return $this->assertText($text, $message); } function assertNoText($text, $message = '%s') { return $this->assert( new NoTextExpectation($text), $this->_browser->getContentAsText(), $message); } function assertNoUnwantedText($text, $message = '%s') { return $this->assertNoText($text, $message); } function assertPattern($pattern, $message = '%s') { return $this->assert( new PatternExpectation($pattern), $this->_browser->getContent(), $message); } function assertWantedPattern($pattern, $message = '%s') { return $this->assertPattern($pattern, $message); } function assertNoPattern($pattern, $message = '%s') { return $this->assert( new NoPatternExpectation($pattern), $this->_browser->getContent(), $message); } function assertNoUnwantedPattern($pattern, $message = '%s') { return $this->assertNoPattern($pattern, $message); } function assertCookie($name, $expected = false, $message = '%s') { $value = $this->getCookie($name); if (! $expected) { return $this->assertTrue( $value, sprintf($message, "Expecting cookie [$name]")); } if (! SimpleExpectation::isExpectation($expected)) { $expected = new EqualExpectation($expected); } return $this->assert($expected, $value, "Expecting cookie [$name] -> $message"); } function assertNoCookie($name, $message = '%s') { return $this->assertTrue( $this->getCookie($name) === false, sprintf($message, "Not expecting cookie [$name]")); } function assertTrue($result, $message = false) { return $this->assert(new TrueExpectation(), $result, $message); } function assertFalse($result, $message = '%s') { return $this->assert(new FalseExpectation(), $result, $message); } function assertEqual($first, $second, $message = '%s') { return $this->assert( new EqualExpectation($first), $second, $message); } function assertNotEqual($first, $second, $message = '%s') { return $this->assert( new NotEqualExpectation($first), $second, $message); } function getAssertionLine() { $trace = new SimpleStackTrace(array('assert', 'click', 'pass', 'fail')); return $trace->traceMethod(); } }   class XmlReporter extends SimpleReporter { var $_indent; var $_namespace; function XmlReporter($namespace = false, $indent = '  ') { $this->SimpleReporter(); $this->_namespace = ($namespace ? $namespace . ':' : ''); $this->_indent = $indent; } function _getIndent($offset = 0) { return str_repeat( $this->_indent, count($this->getTestList()) + $offset); } function toParsedXml($text) { return str_replace( array('&', '<', '>', '"', '\''), array('&amp;', '&lt;', '&gt;', '&quot;', '&apos;'), $text); } function paintGroupStart($test_name, $size) { parent::paintGroupStart($test_name, $size); print $this->_getIndent(); print "<" . $this->_namespace . "group size=\"$size\">\n"; print $this->_getIndent(1); print "<" . $this->_namespace . "name>" . $this->toParsedXml($test_name) . "</" . $this->_namespace . "name>\n"; } function paintGroupEnd($test_name) { print $this->_getIndent(); print "</" . $this->_namespace . "group>\n"; parent::paintGroupEnd($test_name); } function paintCaseStart($test_name) { parent::paintCaseStart($test_name); print $this->_getIndent(); print "<" . $this->_namespace . "case>\n"; print $this->_getIndent(1); print "<" . $this->_namespace . "name>" . $this->toParsedXml($test_name) . "</" . $this->_namespace . "name>\n"; } function paintCaseEnd($test_name) { print $this->_getIndent(); print "</" . $this->_namespace . "case>\n"; parent::paintCaseEnd($test_name); } function paintMethodStart($test_name) { parent::paintMethodStart($test_name); print $this->_getIndent(); print "<" . $this->_namespace . "test>\n"; print $this->_getIndent(1); print "<" . $this->_namespace . "name>" . $this->toParsedXml($test_name) . "</" . $this->_namespace . "name>\n"; } function paintMethodEnd($test_name) { print $this->_getIndent(); print "</" . $this->_namespace . "test>\n"; parent::paintMethodEnd($test_name); } function paintPass($message) { parent::paintPass($message); print $this->_getIndent(1); print "<" . $this->_namespace . "pass>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "pass>\n"; } function paintFail($message) { parent::paintFail($message); print $this->_getIndent(1); print "<" . $this->_namespace . "fail>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "fail>\n"; } function paintError($message) { parent::paintError($message); print $this->_getIndent(1); print "<" . $this->_namespace . "exception>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "exception>\n"; } function paintException($exception) { parent::paintException($exception); print $this->_getIndent(1); print "<" . $this->_namespace . "exception>"; $message = 'Unexpected exception of type [' . get_class($exception) . '] with message ['. $exception->getMessage() . '] in ['. $exception->getFile() . ' line ' . $exception->getLine() . ']'; print $this->toParsedXml($message); print "</" . $this->_namespace . "exception>\n"; } function paintSkip($message) { parent::paintSkip($message); print $this->_getIndent(1); print "<" . $this->_namespace . "skip>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "skip>\n"; } function paintMessage($message) { parent::paintMessage($message); print $this->_getIndent(1); print "<" . $this->_namespace . "message>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "message>\n"; } function paintFormattedMessage($message) { parent::paintFormattedMessage($message); print $this->_getIndent(1); print "<" . $this->_namespace . "formatted>"; print "<![CDATA[$message]]>"; print "</" . $this->_namespace . "formatted>\n"; } function paintSignal($type, $payload) { parent::paintSignal($type, $payload); print $this->_getIndent(1); print "<" . $this->_namespace . "signal type=\"$type\">"; print "<![CDATA[" . serialize($payload) . "]]>"; print "</" . $this->_namespace . "signal>\n"; } function paintHeader($test_name) { if (! SimpleReporter::inCli()) { header('Content-type: text/xml'); } print "<?xml version=\"1.0\""; if ($this->_namespace) { print " xmlns:" . $this->_namespace . "=\"www.lastcraft.com/SimpleTest/Beta3/Report\""; } print "?>\n"; print "<" . $this->_namespace . "run>\n"; } function paintFooter($test_name) { print "</" . $this->_namespace . "run>\n"; } } class NestingXmlTag { var $_name; var $_attributes; function NestingXmlTag($attributes) { $this->_name = false; $this->_attributes = $attributes; } function setName($name) { $this->_name = $name; } function getName() { return $this->_name; } function _getAttributes() { return $this->_attributes; } } class NestingMethodTag extends NestingXmlTag { function NestingMethodTag($attributes) { $this->NestingXmlTag($attributes); } function paintStart(&$listener) { $listener->paintMethodStart($this->getName()); } function paintEnd(&$listener) { $listener->paintMethodEnd($this->getName()); } } class NestingCaseTag extends NestingXmlTag { function NestingCaseTag($attributes) { $this->NestingXmlTag($attributes); } function paintStart(&$listener) { $listener->paintCaseStart($this->getName()); } function paintEnd(&$listener) { $listener->paintCaseEnd($this->getName()); } } class NestingGroupTag extends NestingXmlTag { function NestingGroupTag($attributes) { $this->NestingXmlTag($attributes); } function paintStart(&$listener) { $listener->paintGroupStart($this->getName(), $this->getSize()); } function paintEnd(&$listener) { $listener->paintGroupEnd($this->getName()); } function getSize() { $attributes = $this->_getAttributes(); if (isset($attributes['SIZE'])) { return (integer)$attributes['SIZE']; } return 0; } } class SimpleTestXmlParser { var $_listener; var $_expat; var $_tag_stack; var $_in_content_tag; var $_content; var $_attributes; function SimpleTestXmlParser(&$listener) { $this->_listener = &$listener; $this->_expat = &$this->_createParser(); $this->_tag_stack = array(); $this->_in_content_tag = false; $this->_content = ''; $this->_attributes = array(); } function parse($chunk) { if (! xml_parse($this->_expat, $chunk)) { trigger_error('XML parse error with ' . xml_error_string(xml_get_error_code($this->_expat))); return false; } return true; } function &_createParser() { $expat = xml_parser_create(); xml_set_object($expat, $this); xml_set_element_handler($expat, '_startElement', '_endElement'); xml_set_character_data_handler($expat, '_addContent'); xml_set_default_handler($expat, '_default'); return $expat; } function _pushNestingTag($nested) { array_unshift($this->_tag_stack, $nested); } function &_getCurrentNestingTag() { return $this->_tag_stack[0]; } function _popNestingTag() { return array_shift($this->_tag_stack); } function _isLeaf($tag) { return in_array($tag, array( 'NAME', 'PASS', 'FAIL', 'EXCEPTION', 'SKIP', 'MESSAGE', 'FORMATTED', 'SIGNAL')); } function _startElement($expat, $tag, $attributes) { $this->_attributes = $attributes; if ($tag == 'GROUP') { $this->_pushNestingTag(new NestingGroupTag($attributes)); } elseif ($tag == 'CASE') { $this->_pushNestingTag(new NestingCaseTag($attributes)); } elseif ($tag == 'TEST') { $this->_pushNestingTag(new NestingMethodTag($attributes)); } elseif ($this->_isLeaf($tag)) { $this->_in_content_tag = true; $this->_content = ''; } } function _endElement($expat, $tag) { $this->_in_content_tag = false; if (in_array($tag, array('GROUP', 'CASE', 'TEST'))) { $nesting_tag = $this->_popNestingTag(); $nesting_tag->paintEnd($this->_listener); } elseif ($tag == 'NAME') { $nesting_tag = &$this->_getCurrentNestingTag(); $nesting_tag->setName($this->_content); $nesting_tag->paintStart($this->_listener); } elseif ($tag == 'PASS') { $this->_listener->paintPass($this->_content); } elseif ($tag == 'FAIL') { $this->_listener->paintFail($this->_content); } elseif ($tag == 'EXCEPTION') { $this->_listener->paintError($this->_content); } elseif ($tag == 'SKIP') { $this->_listener->paintSkip($this->_content); } elseif ($tag == 'SIGNAL') { $this->_listener->paintSignal( $this->_attributes['TYPE'], unserialize($this->_content)); } elseif ($tag == 'MESSAGE') { $this->_listener->paintMessage($this->_content); } elseif ($tag == 'FORMATTED') { $this->_listener->paintFormattedMessage($this->_content); } } function _addContent($expat, $text) { if ($this->_in_content_tag) { $this->_content .= $text; } return true; } function _default($expat, $default) { } } ?>